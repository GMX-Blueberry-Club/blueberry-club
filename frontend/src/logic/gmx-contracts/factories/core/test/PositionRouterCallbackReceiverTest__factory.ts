/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  PositionRouterCallbackReceiverTest,
  PositionRouterCallbackReceiverTestInterface,
} from "../../../core/test/PositionRouterCallbackReceiverTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "positionKey",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isExecuted",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isIncrease",
        type: "bool",
      },
    ],
    name: "CallbackCalled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "positionKey",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "isExecuted",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isIncrease",
        type: "bool",
      },
    ],
    name: "gmxPositionCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060d68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063edf3daec14602d575b600080fd5b605760048036036060811015604157600080fd5b5080359060208101351515906040013515156059565b005b6040805184815283151560208201528215158183015290517f4c5b183c9c52e97ac4369ee0a4685a3af880b74946655c4b6e7366b6af1733809181900360600190a150505056fea2646970667358221220ab8b1ee8b71b6849e88453639fd2cc0ee419bae2d801c06fbcba65407f780e0564736f6c634300060c0033";

type PositionRouterCallbackReceiverTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PositionRouterCallbackReceiverTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PositionRouterCallbackReceiverTest__factory extends ContractFactory {
  constructor(...args: PositionRouterCallbackReceiverTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PositionRouterCallbackReceiverTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): PositionRouterCallbackReceiverTest__factory {
    return super.connect(runner) as PositionRouterCallbackReceiverTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PositionRouterCallbackReceiverTestInterface {
    return new Interface(_abi) as PositionRouterCallbackReceiverTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PositionRouterCallbackReceiverTest {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as PositionRouterCallbackReceiverTest;
  }
}
