/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MigrationHandlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "USDG_PRECISION"
      | "admin"
      | "ammRouterV1"
      | "ammRouterV2"
      | "bnb"
      | "busd"
      | "gmt"
      | "initialize"
      | "isInitialized"
      | "redeemUsdg"
      | "refund"
      | "refundedAmounts"
      | "swap"
      | "usdg"
      | "vault"
      | "xgmt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "USDG_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ammRouterV1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ammRouterV2",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bnb", values?: undefined): string;
  encodeFunctionData(functionFragment: "busd", values?: undefined): string;
  encodeFunctionData(functionFragment: "gmt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUsdg",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundedAmounts",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdg", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "xgmt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "USDG_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ammRouterV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ammRouterV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bnb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "busd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gmt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemUsdg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xgmt", data: BytesLike): Result;
}

export interface MigrationHandler extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: MigrationHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  USDG_PRECISION: TypedContractMethod<[], [bigint], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  ammRouterV1: TypedContractMethod<[], [string], "view">;

  ammRouterV2: TypedContractMethod<[], [string], "view">;

  bnb: TypedContractMethod<[], [string], "view">;

  busd: TypedContractMethod<[], [string], "view">;

  gmt: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _ammRouterV1: AddressLike,
      _ammRouterV2: AddressLike,
      _vault: AddressLike,
      _gmt: AddressLike,
      _xgmt: AddressLike,
      _usdg: AddressLike,
      _bnb: AddressLike,
      _busd: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  redeemUsdg: TypedContractMethod<
    [
      _migrator: AddressLike,
      _redemptionToken: AddressLike,
      _usdgAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  refund: TypedContractMethod<
    [
      _migrator: AddressLike,
      _account: AddressLike,
      _token: AddressLike,
      _usdgAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  refundedAmounts: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  swap: TypedContractMethod<
    [
      _migrator: AddressLike,
      _gmtAmountForUsdg: BigNumberish,
      _xgmtAmountForUsdg: BigNumberish,
      _gmtAmountForBusd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  usdg: TypedContractMethod<[], [string], "view">;

  vault: TypedContractMethod<[], [string], "view">;

  xgmt: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "USDG_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ammRouterV1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ammRouterV2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bnb"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "busd"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gmt"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _ammRouterV1: AddressLike,
      _ammRouterV2: AddressLike,
      _vault: AddressLike,
      _gmt: AddressLike,
      _xgmt: AddressLike,
      _usdg: AddressLike,
      _bnb: AddressLike,
      _busd: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "redeemUsdg"
  ): TypedContractMethod<
    [
      _migrator: AddressLike,
      _redemptionToken: AddressLike,
      _usdgAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<
    [
      _migrator: AddressLike,
      _account: AddressLike,
      _token: AddressLike,
      _usdgAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refundedAmounts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      _migrator: AddressLike,
      _gmtAmountForUsdg: BigNumberish,
      _xgmtAmountForUsdg: BigNumberish,
      _gmtAmountForBusd: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdg"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "xgmt"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
