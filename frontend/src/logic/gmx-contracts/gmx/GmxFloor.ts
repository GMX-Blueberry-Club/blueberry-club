/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GmxFloorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS_DIVISOR"
      | "BURN_BASIS_POINTS"
      | "PRICE_PRECISION"
      | "actionsNonce"
      | "admin"
      | "approve"
      | "approveNFT"
      | "approveNFTs"
      | "backedSupply"
      | "baseMintPrice"
      | "burn"
      | "getBurnAmountOut"
      | "getMintPrice"
      | "gmx"
      | "initialize"
      | "isHandler"
      | "isInitialized"
      | "isSigner"
      | "minAuthorizations"
      | "mint"
      | "mintMultiplier"
      | "mintedSupply"
      | "multiplierPrecision"
      | "pendingActions"
      | "receiveNFTs"
      | "reserveToken"
      | "setAdmin"
      | "setBackedSupply"
      | "setGov"
      | "setHandler"
      | "setMintMultiplier"
      | "signApprove"
      | "signApproveNFT"
      | "signApproveNFTs"
      | "signSetAdmin"
      | "signSetGov"
      | "signalApprove"
      | "signalApproveNFT"
      | "signalApproveNFTs"
      | "signalSetAdmin"
      | "signalSetGov"
      | "signedActions"
      | "signers"
      | "signersLength"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClearAction"
      | "SignAction"
      | "SignalApprove"
      | "SignalApproveNFT"
      | "SignalApproveNFTs"
      | "SignalPendingAction"
      | "SignalSetAdmin"
      | "SignalSetGov"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BURN_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "actionsNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNFT",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNFTs",
    values: [AddressLike, AddressLike, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "backedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseMintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBurnAmountOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isHandler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minAuthorizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiplierPrecision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingActions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveNFTs",
    values: [AddressLike, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBackedSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signApprove",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signApproveNFT",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signApproveNFTs",
    values: [AddressLike, AddressLike, BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signSetAdmin",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signSetGov",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApprove",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApproveNFT",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApproveNFTs",
    values: [AddressLike, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetGov",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signedActions",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signersLength",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BURN_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "actionsNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approveNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBurnAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minAuthorizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplierPrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBackedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMintMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signApproveNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signApproveNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signSetAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signSetGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signalApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApproveNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApproveNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signedActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signersLength",
    data: BytesLike
  ): Result;
}

export namespace ClearActionEvent {
  export type InputTuple = [action: BytesLike, nonce: BigNumberish];
  export type OutputTuple = [action: string, nonce: bigint];
  export interface OutputObject {
    action: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignActionEvent {
  export type InputTuple = [action: BytesLike, nonce: BigNumberish];
  export type OutputTuple = [action: string, nonce: bigint];
  export interface OutputObject {
    action: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalApproveEvent {
  export type InputTuple = [
    token: AddressLike,
    spender: AddressLike,
    amount: BigNumberish,
    action: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    spender: string,
    amount: bigint,
    action: string,
    nonce: bigint
  ];
  export interface OutputObject {
    token: string;
    spender: string;
    amount: bigint;
    action: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalApproveNFTEvent {
  export type InputTuple = [
    token: AddressLike,
    spender: AddressLike,
    tokenId: BigNumberish,
    action: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    spender: string,
    tokenId: bigint,
    action: string,
    nonce: bigint
  ];
  export interface OutputObject {
    token: string;
    spender: string;
    tokenId: bigint;
    action: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalApproveNFTsEvent {
  export type InputTuple = [
    token: AddressLike,
    spender: AddressLike,
    tokenIds: BigNumberish[],
    action: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    spender: string,
    tokenIds: bigint[],
    action: string,
    nonce: bigint
  ];
  export interface OutputObject {
    token: string;
    spender: string;
    tokenIds: bigint[];
    action: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalPendingActionEvent {
  export type InputTuple = [action: BytesLike, nonce: BigNumberish];
  export type OutputTuple = [action: string, nonce: bigint];
  export interface OutputObject {
    action: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalSetAdminEvent {
  export type InputTuple = [
    target: AddressLike,
    admin: AddressLike,
    action: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    target: string,
    admin: string,
    action: string,
    nonce: bigint
  ];
  export interface OutputObject {
    target: string;
    admin: string;
    action: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignalSetGovEvent {
  export type InputTuple = [
    timelock: AddressLike,
    target: AddressLike,
    gov: AddressLike,
    action: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    timelock: string,
    target: string,
    gov: string,
    action: string,
    nonce: bigint
  ];
  export interface OutputObject {
    timelock: string;
    target: string;
    gov: string;
    action: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GmxFloor extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: GmxFloorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  BURN_BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  PRICE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  actionsNonce: TypedContractMethod<[], [bigint], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [
      _token: AddressLike,
      _spender: AddressLike,
      _amount: BigNumberish,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  approveNFT: TypedContractMethod<
    [
      _token: AddressLike,
      _spender: AddressLike,
      _tokenId: BigNumberish,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  approveNFTs: TypedContractMethod<
    [
      _token: AddressLike,
      _spender: AddressLike,
      _tokenIds: BigNumberish[],
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  backedSupply: TypedContractMethod<[], [bigint], "view">;

  baseMintPrice: TypedContractMethod<[], [bigint], "view">;

  burn: TypedContractMethod<
    [_amount: BigNumberish, _minOut: BigNumberish, _receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getBurnAmountOut: TypedContractMethod<
    [_amount: BigNumberish],
    [bigint],
    "view"
  >;

  getMintPrice: TypedContractMethod<[], [bigint], "view">;

  gmx: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [_signers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  isHandler: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  isSigner: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  minAuthorizations: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [_amount: BigNumberish, _maxCost: BigNumberish, _receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  mintMultiplier: TypedContractMethod<[], [bigint], "view">;

  mintedSupply: TypedContractMethod<[], [bigint], "view">;

  multiplierPrecision: TypedContractMethod<[], [bigint], "view">;

  pendingActions: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  receiveNFTs: TypedContractMethod<
    [_token: AddressLike, _sender: AddressLike, _tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  reserveToken: TypedContractMethod<[], [string], "view">;

  setAdmin: TypedContractMethod<
    [_target: AddressLike, _admin: AddressLike, _nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBackedSupply: TypedContractMethod<
    [_backedSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGov: TypedContractMethod<
    [
      _timelock: AddressLike,
      _target: AddressLike,
      _gov: AddressLike,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setHandler: TypedContractMethod<
    [_handler: AddressLike, _isHandler: boolean],
    [void],
    "nonpayable"
  >;

  setMintMultiplier: TypedContractMethod<
    [_mintMultiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  signApprove: TypedContractMethod<
    [
      _token: AddressLike,
      _spender: AddressLike,
      _amount: BigNumberish,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  signApproveNFT: TypedContractMethod<
    [
      _token: AddressLike,
      _spender: AddressLike,
      _tokenId: BigNumberish,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  signApproveNFTs: TypedContractMethod<
    [
      _token: AddressLike,
      _spender: AddressLike,
      _tokenIds: BigNumberish[],
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  signSetAdmin: TypedContractMethod<
    [_target: AddressLike, _admin: AddressLike, _nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  signSetGov: TypedContractMethod<
    [
      _timelock: AddressLike,
      _target: AddressLike,
      _gov: AddressLike,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  signalApprove: TypedContractMethod<
    [_token: AddressLike, _spender: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  signalApproveNFT: TypedContractMethod<
    [_token: AddressLike, _spender: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  signalApproveNFTs: TypedContractMethod<
    [_token: AddressLike, _spender: AddressLike, _tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  signalSetAdmin: TypedContractMethod<
    [_target: AddressLike, _admin: AddressLike],
    [void],
    "nonpayable"
  >;

  signalSetGov: TypedContractMethod<
    [_timelock: AddressLike, _target: AddressLike, _gov: AddressLike],
    [void],
    "nonpayable"
  >;

  signedActions: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  signers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  signersLength: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BURN_BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "actionsNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _spender: AddressLike,
      _amount: BigNumberish,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveNFT"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _spender: AddressLike,
      _tokenId: BigNumberish,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveNFTs"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _spender: AddressLike,
      _tokenIds: BigNumberish[],
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "backedSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseMintPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [_amount: BigNumberish, _minOut: BigNumberish, _receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBurnAmountOut"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMintPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gmx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_signers: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isHandler"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSigner"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "minAuthorizations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [_amount: BigNumberish, _maxCost: BigNumberish, _receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintedSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "multiplierPrecision"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingActions"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "receiveNFTs"
  ): TypedContractMethod<
    [_token: AddressLike, _sender: AddressLike, _tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reserveToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<
    [_target: AddressLike, _admin: AddressLike, _nonce: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBackedSupply"
  ): TypedContractMethod<[_backedSupply: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGov"
  ): TypedContractMethod<
    [
      _timelock: AddressLike,
      _target: AddressLike,
      _gov: AddressLike,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHandler"
  ): TypedContractMethod<
    [_handler: AddressLike, _isHandler: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMintMultiplier"
  ): TypedContractMethod<[_mintMultiplier: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signApprove"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _spender: AddressLike,
      _amount: BigNumberish,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signApproveNFT"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _spender: AddressLike,
      _tokenId: BigNumberish,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signApproveNFTs"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _spender: AddressLike,
      _tokenIds: BigNumberish[],
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signSetAdmin"
  ): TypedContractMethod<
    [_target: AddressLike, _admin: AddressLike, _nonce: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signSetGov"
  ): TypedContractMethod<
    [
      _timelock: AddressLike,
      _target: AddressLike,
      _gov: AddressLike,
      _nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signalApprove"
  ): TypedContractMethod<
    [_token: AddressLike, _spender: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signalApproveNFT"
  ): TypedContractMethod<
    [_token: AddressLike, _spender: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signalApproveNFTs"
  ): TypedContractMethod<
    [_token: AddressLike, _spender: AddressLike, _tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signalSetAdmin"
  ): TypedContractMethod<
    [_target: AddressLike, _admin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signalSetGov"
  ): TypedContractMethod<
    [_timelock: AddressLike, _target: AddressLike, _gov: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signedActions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "signers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "signersLength"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ClearAction"
  ): TypedContractEvent<
    ClearActionEvent.InputTuple,
    ClearActionEvent.OutputTuple,
    ClearActionEvent.OutputObject
  >;
  getEvent(
    key: "SignAction"
  ): TypedContractEvent<
    SignActionEvent.InputTuple,
    SignActionEvent.OutputTuple,
    SignActionEvent.OutputObject
  >;
  getEvent(
    key: "SignalApprove"
  ): TypedContractEvent<
    SignalApproveEvent.InputTuple,
    SignalApproveEvent.OutputTuple,
    SignalApproveEvent.OutputObject
  >;
  getEvent(
    key: "SignalApproveNFT"
  ): TypedContractEvent<
    SignalApproveNFTEvent.InputTuple,
    SignalApproveNFTEvent.OutputTuple,
    SignalApproveNFTEvent.OutputObject
  >;
  getEvent(
    key: "SignalApproveNFTs"
  ): TypedContractEvent<
    SignalApproveNFTsEvent.InputTuple,
    SignalApproveNFTsEvent.OutputTuple,
    SignalApproveNFTsEvent.OutputObject
  >;
  getEvent(
    key: "SignalPendingAction"
  ): TypedContractEvent<
    SignalPendingActionEvent.InputTuple,
    SignalPendingActionEvent.OutputTuple,
    SignalPendingActionEvent.OutputObject
  >;
  getEvent(
    key: "SignalSetAdmin"
  ): TypedContractEvent<
    SignalSetAdminEvent.InputTuple,
    SignalSetAdminEvent.OutputTuple,
    SignalSetAdminEvent.OutputObject
  >;
  getEvent(
    key: "SignalSetGov"
  ): TypedContractEvent<
    SignalSetGovEvent.InputTuple,
    SignalSetGovEvent.OutputTuple,
    SignalSetGovEvent.OutputObject
  >;

  filters: {
    "ClearAction(bytes32,uint256)": TypedContractEvent<
      ClearActionEvent.InputTuple,
      ClearActionEvent.OutputTuple,
      ClearActionEvent.OutputObject
    >;
    ClearAction: TypedContractEvent<
      ClearActionEvent.InputTuple,
      ClearActionEvent.OutputTuple,
      ClearActionEvent.OutputObject
    >;

    "SignAction(bytes32,uint256)": TypedContractEvent<
      SignActionEvent.InputTuple,
      SignActionEvent.OutputTuple,
      SignActionEvent.OutputObject
    >;
    SignAction: TypedContractEvent<
      SignActionEvent.InputTuple,
      SignActionEvent.OutputTuple,
      SignActionEvent.OutputObject
    >;

    "SignalApprove(address,address,uint256,bytes32,uint256)": TypedContractEvent<
      SignalApproveEvent.InputTuple,
      SignalApproveEvent.OutputTuple,
      SignalApproveEvent.OutputObject
    >;
    SignalApprove: TypedContractEvent<
      SignalApproveEvent.InputTuple,
      SignalApproveEvent.OutputTuple,
      SignalApproveEvent.OutputObject
    >;

    "SignalApproveNFT(address,address,uint256,bytes32,uint256)": TypedContractEvent<
      SignalApproveNFTEvent.InputTuple,
      SignalApproveNFTEvent.OutputTuple,
      SignalApproveNFTEvent.OutputObject
    >;
    SignalApproveNFT: TypedContractEvent<
      SignalApproveNFTEvent.InputTuple,
      SignalApproveNFTEvent.OutputTuple,
      SignalApproveNFTEvent.OutputObject
    >;

    "SignalApproveNFTs(address,address,uint256[],bytes32,uint256)": TypedContractEvent<
      SignalApproveNFTsEvent.InputTuple,
      SignalApproveNFTsEvent.OutputTuple,
      SignalApproveNFTsEvent.OutputObject
    >;
    SignalApproveNFTs: TypedContractEvent<
      SignalApproveNFTsEvent.InputTuple,
      SignalApproveNFTsEvent.OutputTuple,
      SignalApproveNFTsEvent.OutputObject
    >;

    "SignalPendingAction(bytes32,uint256)": TypedContractEvent<
      SignalPendingActionEvent.InputTuple,
      SignalPendingActionEvent.OutputTuple,
      SignalPendingActionEvent.OutputObject
    >;
    SignalPendingAction: TypedContractEvent<
      SignalPendingActionEvent.InputTuple,
      SignalPendingActionEvent.OutputTuple,
      SignalPendingActionEvent.OutputObject
    >;

    "SignalSetAdmin(address,address,bytes32,uint256)": TypedContractEvent<
      SignalSetAdminEvent.InputTuple,
      SignalSetAdminEvent.OutputTuple,
      SignalSetAdminEvent.OutputObject
    >;
    SignalSetAdmin: TypedContractEvent<
      SignalSetAdminEvent.InputTuple,
      SignalSetAdminEvent.OutputTuple,
      SignalSetAdminEvent.OutputObject
    >;

    "SignalSetGov(address,address,address,bytes32,uint256)": TypedContractEvent<
      SignalSetGovEvent.InputTuple,
      SignalSetGovEvent.OutputTuple,
      SignalSetGovEvent.OutputObject
    >;
    SignalSetGov: TypedContractEvent<
      SignalSetGovEvent.InputTuple,
      SignalSetGovEvent.OutputTuple,
      SignalSetGovEvent.OutputObject
    >;
  };
}
