/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IFastPriceFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "lastUpdatedAt"
      | "lastUpdatedBlock"
      | "setIsSpreadEnabled"
      | "setMaxCumulativeDeltaDiffs"
      | "setMaxDeviationBasisPoints"
      | "setMaxPriceUpdateDelay"
      | "setMinBlockInterval"
      | "setPriceDataInterval"
      | "setPriceDuration"
      | "setSigner"
      | "setSpreadBasisPointsIfChainError"
      | "setSpreadBasisPointsIfInactive"
      | "setUpdater"
      | "setVaultPriceFeed"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "lastUpdatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSpreadEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCumulativeDeltaDiffs",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDeviationBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceUpdateDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBlockInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceDataInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPointsIfChainError",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPointsIfInactive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdater",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultPriceFeed",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "lastUpdatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSpreadEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCumulativeDeltaDiffs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDeviationBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceUpdateDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBlockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceDataInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPointsIfChainError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPointsIfInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUpdater", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultPriceFeed",
    data: BytesLike
  ): Result;
}

export interface IFastPriceFeed extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: IFastPriceFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  lastUpdatedAt: TypedContractMethod<[], [bigint], "view">;

  lastUpdatedBlock: TypedContractMethod<[], [bigint], "view">;

  setIsSpreadEnabled: TypedContractMethod<
    [_isSpreadEnabled: boolean],
    [void],
    "nonpayable"
  >;

  setMaxCumulativeDeltaDiffs: TypedContractMethod<
    [_tokens: AddressLike[], _maxCumulativeDeltaDiffs: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setMaxDeviationBasisPoints: TypedContractMethod<
    [_maxDeviationBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxPriceUpdateDelay: TypedContractMethod<
    [_maxPriceUpdateDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinBlockInterval: TypedContractMethod<
    [_minBlockInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceDataInterval: TypedContractMethod<
    [_priceDataInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceDuration: TypedContractMethod<
    [_priceDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSigner: TypedContractMethod<
    [_account: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setSpreadBasisPointsIfChainError: TypedContractMethod<
    [_spreadBasisPointsIfChainError: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSpreadBasisPointsIfInactive: TypedContractMethod<
    [_spreadBasisPointsIfInactive: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUpdater: TypedContractMethod<
    [_account: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setVaultPriceFeed: TypedContractMethod<
    [_vaultPriceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "lastUpdatedAt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastUpdatedBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setIsSpreadEnabled"
  ): TypedContractMethod<[_isSpreadEnabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxCumulativeDeltaDiffs"
  ): TypedContractMethod<
    [_tokens: AddressLike[], _maxCumulativeDeltaDiffs: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxDeviationBasisPoints"
  ): TypedContractMethod<
    [_maxDeviationBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxPriceUpdateDelay"
  ): TypedContractMethod<
    [_maxPriceUpdateDelay: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinBlockInterval"
  ): TypedContractMethod<
    [_minBlockInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceDataInterval"
  ): TypedContractMethod<
    [_priceDataInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceDuration"
  ): TypedContractMethod<[_priceDuration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSigner"
  ): TypedContractMethod<
    [_account: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSpreadBasisPointsIfChainError"
  ): TypedContractMethod<
    [_spreadBasisPointsIfChainError: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSpreadBasisPointsIfInactive"
  ): TypedContractMethod<
    [_spreadBasisPointsIfInactive: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUpdater"
  ): TypedContractMethod<
    [_account: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVaultPriceFeed"
  ): TypedContractMethod<[_vaultPriceFeed: AddressLike], [void], "nonpayable">;

  filters: {};
}
