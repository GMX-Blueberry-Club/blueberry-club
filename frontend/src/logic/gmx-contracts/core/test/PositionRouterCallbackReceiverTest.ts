/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PositionRouterCallbackReceiverTestInterface extends Interface {
  getFunction(nameOrSignature: "gmxPositionCallback"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CallbackCalled"): EventFragment;

  encodeFunctionData(
    functionFragment: "gmxPositionCallback",
    values: [BytesLike, boolean, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "gmxPositionCallback",
    data: BytesLike
  ): Result;
}

export namespace CallbackCalledEvent {
  export type InputTuple = [
    positionKey: BytesLike,
    isExecuted: boolean,
    isIncrease: boolean
  ];
  export type OutputTuple = [
    positionKey: string,
    isExecuted: boolean,
    isIncrease: boolean
  ];
  export interface OutputObject {
    positionKey: string;
    isExecuted: boolean;
    isIncrease: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PositionRouterCallbackReceiverTest extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: PositionRouterCallbackReceiverTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  gmxPositionCallback: TypedContractMethod<
    [positionKey: BytesLike, isExecuted: boolean, isIncrease: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "gmxPositionCallback"
  ): TypedContractMethod<
    [positionKey: BytesLike, isExecuted: boolean, isIncrease: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CallbackCalled"
  ): TypedContractEvent<
    CallbackCalledEvent.InputTuple,
    CallbackCalledEvent.OutputTuple,
    CallbackCalledEvent.OutputObject
  >;

  filters: {
    "CallbackCalled(bytes32,bool,bool)": TypedContractEvent<
      CallbackCalledEvent.InputTuple,
      CallbackCalledEvent.OutputTuple,
      CallbackCalledEvent.OutputObject
    >;
    CallbackCalled: TypedContractEvent<
      CallbackCalledEvent.InputTuple,
      CallbackCalledEvent.OutputTuple,
      CallbackCalledEvent.OutputObject
    >;
  };
}
