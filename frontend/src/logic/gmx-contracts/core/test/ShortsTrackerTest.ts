/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ShortsTrackerTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_INT256"
      | "_getNextGlobalAveragePrice"
      | "data"
      | "getGlobalShortDelta"
      | "getNextGlobalShortData"
      | "getNextGlobalShortDataWithRealisedPnl"
      | "getRealisedPnl"
      | "globalShortAveragePrices"
      | "gov"
      | "isGlobalShortDataReady"
      | "isHandler"
      | "setGlobalShortAveragePrice"
      | "setGov"
      | "setHandler"
      | "setInitData"
      | "setIsGlobalShortDataReady"
      | "updateGlobalShortData"
      | "vault"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GlobalShortDataUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_INT256",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getNextGlobalAveragePrice",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "data", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getGlobalShortDelta",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextGlobalShortData",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextGlobalShortDataWithRealisedPnl",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRealisedPnl",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "globalShortAveragePrices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isGlobalShortDataReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isHandler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalShortAveragePrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitData",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsGlobalShortDataReady",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGlobalShortData",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      boolean,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_INT256", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getNextGlobalAveragePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalShortDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextGlobalShortData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextGlobalShortDataWithRealisedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRealisedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalShortAveragePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGlobalShortDataReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalShortAveragePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInitData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsGlobalShortDataReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGlobalShortData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
}

export namespace GlobalShortDataUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    globalShortSize: BigNumberish,
    globalShortAveragePrice: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    globalShortSize: bigint,
    globalShortAveragePrice: bigint
  ];
  export interface OutputObject {
    token: string;
    globalShortSize: bigint;
    globalShortAveragePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ShortsTrackerTest extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: ShortsTrackerTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_INT256: TypedContractMethod<[], [bigint], "view">;

  _getNextGlobalAveragePrice: TypedContractMethod<
    [
      _averagePrice: BigNumberish,
      _nextPrice: BigNumberish,
      _nextSize: BigNumberish,
      _delta: BigNumberish,
      _realisedPnl: BigNumberish
    ],
    [bigint],
    "view"
  >;

  data: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getGlobalShortDelta: TypedContractMethod<
    [_token: AddressLike],
    [[boolean, bigint]],
    "view"
  >;

  getNextGlobalShortData: TypedContractMethod<
    [
      _account: AddressLike,
      _collateralToken: AddressLike,
      _indexToken: AddressLike,
      _nextPrice: BigNumberish,
      _sizeDelta: BigNumberish,
      _isIncrease: boolean
    ],
    [[bigint, bigint]],
    "view"
  >;

  getNextGlobalShortDataWithRealisedPnl: TypedContractMethod<
    [
      _indexToken: AddressLike,
      _nextPrice: BigNumberish,
      _sizeDelta: BigNumberish,
      _realisedPnl: BigNumberish,
      _isIncrease: boolean
    ],
    [[bigint, bigint]],
    "view"
  >;

  getRealisedPnl: TypedContractMethod<
    [
      _account: AddressLike,
      _collateralToken: AddressLike,
      _indexToken: AddressLike,
      _sizeDelta: BigNumberish,
      _isIncrease: boolean
    ],
    [bigint],
    "view"
  >;

  globalShortAveragePrices: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  gov: TypedContractMethod<[], [string], "view">;

  isGlobalShortDataReady: TypedContractMethod<[], [boolean], "view">;

  isHandler: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  setGlobalShortAveragePrice: TypedContractMethod<
    [_token: AddressLike, _averagePrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGov: TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;

  setHandler: TypedContractMethod<
    [_handler: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setInitData: TypedContractMethod<
    [_tokens: AddressLike[], _averagePrices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setIsGlobalShortDataReady: TypedContractMethod<
    [value: boolean],
    [void],
    "nonpayable"
  >;

  updateGlobalShortData: TypedContractMethod<
    [
      _account: AddressLike,
      _collateralToken: AddressLike,
      _indexToken: AddressLike,
      _isLong: boolean,
      _sizeDelta: BigNumberish,
      _markPrice: BigNumberish,
      _isIncrease: boolean
    ],
    [void],
    "nonpayable"
  >;

  vault: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_INT256"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_getNextGlobalAveragePrice"
  ): TypedContractMethod<
    [
      _averagePrice: BigNumberish,
      _nextPrice: BigNumberish,
      _nextSize: BigNumberish,
      _delta: BigNumberish,
      _realisedPnl: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "data"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getGlobalShortDelta"
  ): TypedContractMethod<[_token: AddressLike], [[boolean, bigint]], "view">;
  getFunction(
    nameOrSignature: "getNextGlobalShortData"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _collateralToken: AddressLike,
      _indexToken: AddressLike,
      _nextPrice: BigNumberish,
      _sizeDelta: BigNumberish,
      _isIncrease: boolean
    ],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextGlobalShortDataWithRealisedPnl"
  ): TypedContractMethod<
    [
      _indexToken: AddressLike,
      _nextPrice: BigNumberish,
      _sizeDelta: BigNumberish,
      _realisedPnl: BigNumberish,
      _isIncrease: boolean
    ],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRealisedPnl"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _collateralToken: AddressLike,
      _indexToken: AddressLike,
      _sizeDelta: BigNumberish,
      _isIncrease: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalShortAveragePrices"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isGlobalShortDataReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isHandler"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setGlobalShortAveragePrice"
  ): TypedContractMethod<
    [_token: AddressLike, _averagePrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGov"
  ): TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHandler"
  ): TypedContractMethod<
    [_handler: AddressLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInitData"
  ): TypedContractMethod<
    [_tokens: AddressLike[], _averagePrices: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsGlobalShortDataReady"
  ): TypedContractMethod<[value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGlobalShortData"
  ): TypedContractMethod<
    [
      _account: AddressLike,
      _collateralToken: AddressLike,
      _indexToken: AddressLike,
      _isLong: boolean,
      _sizeDelta: BigNumberish,
      _markPrice: BigNumberish,
      _isIncrease: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "GlobalShortDataUpdated"
  ): TypedContractEvent<
    GlobalShortDataUpdatedEvent.InputTuple,
    GlobalShortDataUpdatedEvent.OutputTuple,
    GlobalShortDataUpdatedEvent.OutputObject
  >;

  filters: {
    "GlobalShortDataUpdated(address,uint256,uint256)": TypedContractEvent<
      GlobalShortDataUpdatedEvent.InputTuple,
      GlobalShortDataUpdatedEvent.OutputTuple,
      GlobalShortDataUpdatedEvent.OutputObject
    >;
    GlobalShortDataUpdated: TypedContractEvent<
      GlobalShortDataUpdatedEvent.InputTuple,
      GlobalShortDataUpdatedEvent.OutputTuple,
      GlobalShortDataUpdatedEvent.OutputObject
    >;
  };
}
