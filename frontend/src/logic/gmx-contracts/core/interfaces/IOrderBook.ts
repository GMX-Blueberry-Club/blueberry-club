/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IOrderBookInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeDecreaseOrder"
      | "executeIncreaseOrder"
      | "executeSwapOrder"
      | "getDecreaseOrder"
      | "getIncreaseOrder"
      | "getSwapOrder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeDecreaseOrder",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeIncreaseOrder",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSwapOrder",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecreaseOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncreaseOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapOrder",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSwapOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncreaseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapOrder",
    data: BytesLike
  ): Result;
}

export interface IOrderBook extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: IOrderBookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeDecreaseOrder: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [void],
    "nonpayable"
  >;

  executeIncreaseOrder: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [void],
    "nonpayable"
  >;

  executeSwapOrder: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [void],
    "nonpayable"
  >;

  getDecreaseOrder: TypedContractMethod<
    [_account: AddressLike, _orderIndex: BigNumberish],
    [
      [string, bigint, string, bigint, boolean, bigint, boolean, bigint] & {
        collateralToken: string;
        collateralDelta: bigint;
        indexToken: string;
        sizeDelta: bigint;
        isLong: boolean;
        triggerPrice: bigint;
        triggerAboveThreshold: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;

  getIncreaseOrder: TypedContractMethod<
    [_account: AddressLike, _orderIndex: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        string,
        bigint,
        boolean,
        bigint,
        boolean,
        bigint
      ] & {
        purchaseToken: string;
        purchaseTokenAmount: bigint;
        collateralToken: string;
        indexToken: string;
        sizeDelta: bigint;
        isLong: boolean;
        triggerPrice: bigint;
        triggerAboveThreshold: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;

  getSwapOrder: TypedContractMethod<
    [_account: AddressLike, _orderIndex: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint
      ] & {
        path0: string;
        path1: string;
        path2: string;
        amountIn: bigint;
        minOut: bigint;
        triggerRatio: bigint;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeDecreaseOrder"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeIncreaseOrder"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeSwapOrder"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDecreaseOrder"
  ): TypedContractMethod<
    [_account: AddressLike, _orderIndex: BigNumberish],
    [
      [string, bigint, string, bigint, boolean, bigint, boolean, bigint] & {
        collateralToken: string;
        collateralDelta: bigint;
        indexToken: string;
        sizeDelta: bigint;
        isLong: boolean;
        triggerPrice: bigint;
        triggerAboveThreshold: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIncreaseOrder"
  ): TypedContractMethod<
    [_account: AddressLike, _orderIndex: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        string,
        bigint,
        boolean,
        bigint,
        boolean,
        bigint
      ] & {
        purchaseToken: string;
        purchaseTokenAmount: bigint;
        collateralToken: string;
        indexToken: string;
        sizeDelta: bigint;
        isLong: boolean;
        triggerPrice: bigint;
        triggerAboveThreshold: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSwapOrder"
  ): TypedContractMethod<
    [_account: AddressLike, _orderIndex: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint
      ] & {
        path0: string;
        path1: string;
        path2: string;
        amountIn: bigint;
        minOut: bigint;
        triggerRatio: bigint;
        triggerAboveThreshold: boolean;
        shouldUnwrap: boolean;
        executionFee: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
