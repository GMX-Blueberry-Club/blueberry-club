/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VaultPriceFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINTS_DIVISOR"
      | "MAX_ADJUSTMENT_BASIS_POINTS"
      | "MAX_ADJUSTMENT_INTERVAL"
      | "MAX_SPREAD_BASIS_POINTS"
      | "ONE_USD"
      | "PRICE_PRECISION"
      | "adjustmentBasisPoints"
      | "bnb"
      | "bnbBusd"
      | "btc"
      | "btcBnb"
      | "chainlinkFlags"
      | "eth"
      | "ethBnb"
      | "favorPrimaryPrice"
      | "getAmmPrice"
      | "getAmmPriceV2"
      | "getLatestPrimaryPrice"
      | "getPairPrice"
      | "getPrice"
      | "getPriceV1"
      | "getPriceV2"
      | "getPrimaryPrice"
      | "getSecondaryPrice"
      | "gov"
      | "isAdjustmentAdditive"
      | "isAmmEnabled"
      | "isSecondaryPriceEnabled"
      | "lastAdjustmentTimings"
      | "maxStrictPriceDeviation"
      | "priceDecimals"
      | "priceFeeds"
      | "priceSampleSpace"
      | "secondaryPriceFeed"
      | "setAdjustment"
      | "setChainlinkFlags"
      | "setFavorPrimaryPrice"
      | "setGov"
      | "setIsAmmEnabled"
      | "setIsSecondaryPriceEnabled"
      | "setMaxStrictPriceDeviation"
      | "setPairs"
      | "setPriceSampleSpace"
      | "setSecondaryPriceFeed"
      | "setSpreadBasisPoints"
      | "setSpreadThresholdBasisPoints"
      | "setTokenConfig"
      | "setTokens"
      | "setUseV2Pricing"
      | "spreadBasisPoints"
      | "spreadThresholdBasisPoints"
      | "strictStableTokens"
      | "useV2Pricing"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ADJUSTMENT_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ADJUSTMENT_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SPREAD_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE_USD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adjustmentBasisPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bnb", values?: undefined): string;
  encodeFunctionData(functionFragment: "bnbBusd", values?: undefined): string;
  encodeFunctionData(functionFragment: "btc", values?: undefined): string;
  encodeFunctionData(functionFragment: "btcBnb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "chainlinkFlags",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "eth", values?: undefined): string;
  encodeFunctionData(functionFragment: "ethBnb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "favorPrimaryPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmmPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmmPriceV2",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrimaryPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairPrice",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike, boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceV1",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceV2",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimaryPrice",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondaryPrice",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAdjustmentAdditive",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAmmEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSecondaryPriceEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastAdjustmentTimings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxStrictPriceDeviation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceDecimals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceSampleSpace",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondaryPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdjustment",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkFlags",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFavorPrimaryPrice",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setIsAmmEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSecondaryPriceEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStrictPriceDeviation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairs",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceSampleSpace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecondaryPriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPoints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadThresholdBasisPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig",
    values: [AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokens",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseV2Pricing",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "spreadBasisPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "spreadThresholdBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strictStableTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "useV2Pricing",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ADJUSTMENT_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ADJUSTMENT_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SPREAD_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE_USD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustmentBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bnb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bnbBusd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btcBnb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethBnb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "favorPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmmPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmmPriceV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPriceV1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPriceV2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAdjustmentAdditive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAmmEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSecondaryPriceEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastAdjustmentTimings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxStrictPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceSampleSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondaryPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFavorPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsAmmEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSecondaryPriceEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStrictPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceSampleSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecondaryPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadThresholdBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUseV2Pricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadThresholdBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strictStableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useV2Pricing",
    data: BytesLike
  ): Result;
}

export interface VaultPriceFeed extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: VaultPriceFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINTS_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  MAX_ADJUSTMENT_BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  MAX_ADJUSTMENT_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  MAX_SPREAD_BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  ONE_USD: TypedContractMethod<[], [bigint], "view">;

  PRICE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  adjustmentBasisPoints: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  bnb: TypedContractMethod<[], [string], "view">;

  bnbBusd: TypedContractMethod<[], [string], "view">;

  btc: TypedContractMethod<[], [string], "view">;

  btcBnb: TypedContractMethod<[], [string], "view">;

  chainlinkFlags: TypedContractMethod<[], [string], "view">;

  eth: TypedContractMethod<[], [string], "view">;

  ethBnb: TypedContractMethod<[], [string], "view">;

  favorPrimaryPrice: TypedContractMethod<[], [boolean], "view">;

  getAmmPrice: TypedContractMethod<[_token: AddressLike], [bigint], "view">;

  getAmmPriceV2: TypedContractMethod<
    [_token: AddressLike, _maximise: boolean, _primaryPrice: BigNumberish],
    [bigint],
    "view"
  >;

  getLatestPrimaryPrice: TypedContractMethod<
    [_token: AddressLike],
    [bigint],
    "view"
  >;

  getPairPrice: TypedContractMethod<
    [_pair: AddressLike, _divByReserve0: boolean],
    [bigint],
    "view"
  >;

  getPrice: TypedContractMethod<
    [
      _token: AddressLike,
      _maximise: boolean,
      _includeAmmPrice: boolean,
      arg3: boolean
    ],
    [bigint],
    "view"
  >;

  getPriceV1: TypedContractMethod<
    [_token: AddressLike, _maximise: boolean, _includeAmmPrice: boolean],
    [bigint],
    "view"
  >;

  getPriceV2: TypedContractMethod<
    [_token: AddressLike, _maximise: boolean, _includeAmmPrice: boolean],
    [bigint],
    "view"
  >;

  getPrimaryPrice: TypedContractMethod<
    [_token: AddressLike, _maximise: boolean],
    [bigint],
    "view"
  >;

  getSecondaryPrice: TypedContractMethod<
    [_token: AddressLike, _referencePrice: BigNumberish, _maximise: boolean],
    [bigint],
    "view"
  >;

  gov: TypedContractMethod<[], [string], "view">;

  isAdjustmentAdditive: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  isAmmEnabled: TypedContractMethod<[], [boolean], "view">;

  isSecondaryPriceEnabled: TypedContractMethod<[], [boolean], "view">;

  lastAdjustmentTimings: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  maxStrictPriceDeviation: TypedContractMethod<[], [bigint], "view">;

  priceDecimals: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  priceFeeds: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  priceSampleSpace: TypedContractMethod<[], [bigint], "view">;

  secondaryPriceFeed: TypedContractMethod<[], [string], "view">;

  setAdjustment: TypedContractMethod<
    [_token: AddressLike, _isAdditive: boolean, _adjustmentBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setChainlinkFlags: TypedContractMethod<
    [_chainlinkFlags: AddressLike],
    [void],
    "nonpayable"
  >;

  setFavorPrimaryPrice: TypedContractMethod<
    [_favorPrimaryPrice: boolean],
    [void],
    "nonpayable"
  >;

  setGov: TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;

  setIsAmmEnabled: TypedContractMethod<
    [_isEnabled: boolean],
    [void],
    "nonpayable"
  >;

  setIsSecondaryPriceEnabled: TypedContractMethod<
    [_isEnabled: boolean],
    [void],
    "nonpayable"
  >;

  setMaxStrictPriceDeviation: TypedContractMethod<
    [_maxStrictPriceDeviation: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPairs: TypedContractMethod<
    [_bnbBusd: AddressLike, _ethBnb: AddressLike, _btcBnb: AddressLike],
    [void],
    "nonpayable"
  >;

  setPriceSampleSpace: TypedContractMethod<
    [_priceSampleSpace: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSecondaryPriceFeed: TypedContractMethod<
    [_secondaryPriceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setSpreadBasisPoints: TypedContractMethod<
    [_token: AddressLike, _spreadBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSpreadThresholdBasisPoints: TypedContractMethod<
    [_spreadThresholdBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenConfig: TypedContractMethod<
    [
      _token: AddressLike,
      _priceFeed: AddressLike,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean
    ],
    [void],
    "nonpayable"
  >;

  setTokens: TypedContractMethod<
    [_btc: AddressLike, _eth: AddressLike, _bnb: AddressLike],
    [void],
    "nonpayable"
  >;

  setUseV2Pricing: TypedContractMethod<
    [_useV2Pricing: boolean],
    [void],
    "nonpayable"
  >;

  spreadBasisPoints: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  spreadThresholdBasisPoints: TypedContractMethod<[], [bigint], "view">;

  strictStableTokens: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  useV2Pricing: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINTS_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_ADJUSTMENT_BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_ADJUSTMENT_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SPREAD_BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONE_USD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRICE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "adjustmentBasisPoints"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bnb"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bnbBusd"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "btc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "btcBnb"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "chainlinkFlags"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "eth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ethBnb"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "favorPrimaryPrice"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAmmPrice"
  ): TypedContractMethod<[_token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAmmPriceV2"
  ): TypedContractMethod<
    [_token: AddressLike, _maximise: boolean, _primaryPrice: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLatestPrimaryPrice"
  ): TypedContractMethod<[_token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPairPrice"
  ): TypedContractMethod<
    [_pair: AddressLike, _divByReserve0: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _maximise: boolean,
      _includeAmmPrice: boolean,
      arg3: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceV1"
  ): TypedContractMethod<
    [_token: AddressLike, _maximise: boolean, _includeAmmPrice: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceV2"
  ): TypedContractMethod<
    [_token: AddressLike, _maximise: boolean, _includeAmmPrice: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrimaryPrice"
  ): TypedContractMethod<
    [_token: AddressLike, _maximise: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSecondaryPrice"
  ): TypedContractMethod<
    [_token: AddressLike, _referencePrice: BigNumberish, _maximise: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "gov"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAdjustmentAdditive"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAmmEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSecondaryPriceEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastAdjustmentTimings"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxStrictPriceDeviation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceDecimals"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "priceFeeds"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "priceSampleSpace"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "secondaryPriceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAdjustment"
  ): TypedContractMethod<
    [_token: AddressLike, _isAdditive: boolean, _adjustmentBps: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setChainlinkFlags"
  ): TypedContractMethod<[_chainlinkFlags: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFavorPrimaryPrice"
  ): TypedContractMethod<[_favorPrimaryPrice: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGov"
  ): TypedContractMethod<[_gov: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsAmmEnabled"
  ): TypedContractMethod<[_isEnabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsSecondaryPriceEnabled"
  ): TypedContractMethod<[_isEnabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxStrictPriceDeviation"
  ): TypedContractMethod<
    [_maxStrictPriceDeviation: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPairs"
  ): TypedContractMethod<
    [_bnbBusd: AddressLike, _ethBnb: AddressLike, _btcBnb: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceSampleSpace"
  ): TypedContractMethod<
    [_priceSampleSpace: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSecondaryPriceFeed"
  ): TypedContractMethod<
    [_secondaryPriceFeed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSpreadBasisPoints"
  ): TypedContractMethod<
    [_token: AddressLike, _spreadBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSpreadThresholdBasisPoints"
  ): TypedContractMethod<
    [_spreadThresholdBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenConfig"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _priceFeed: AddressLike,
      _priceDecimals: BigNumberish,
      _isStrictStable: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokens"
  ): TypedContractMethod<
    [_btc: AddressLike, _eth: AddressLike, _bnb: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUseV2Pricing"
  ): TypedContractMethod<[_useV2Pricing: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "spreadBasisPoints"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "spreadThresholdBasisPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "strictStableTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "useV2Pricing"
  ): TypedContractMethod<[], [boolean], "view">;

  filters: {};
}
