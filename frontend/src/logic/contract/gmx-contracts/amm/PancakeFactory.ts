/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface PancakeFactoryInterface extends utils.Interface {
  functions: {
    "bnb()": FunctionFragment;
    "bnbBusdPair()": FunctionFragment;
    "btc()": FunctionFragment;
    "btcBnbPair()": FunctionFragment;
    "busd()": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bnb"
      | "bnbBusdPair"
      | "btc"
      | "btcBnbPair"
      | "busd"
      | "getPair"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bnb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bnbBusdPair",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "btc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "btcBnbPair",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "busd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "bnb", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bnbBusdPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "btc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btcBnbPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "busd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;

  events: {};
}

export interface PancakeFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PancakeFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bnb(overrides?: CallOverrides): Promise<[string]>;

    bnbBusdPair(overrides?: CallOverrides): Promise<[string]>;

    btc(overrides?: CallOverrides): Promise<[string]>;

    btcBnbPair(overrides?: CallOverrides): Promise<[string]>;

    busd(overrides?: CallOverrides): Promise<[string]>;

    getPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  bnb(overrides?: CallOverrides): Promise<string>;

  bnbBusdPair(overrides?: CallOverrides): Promise<string>;

  btc(overrides?: CallOverrides): Promise<string>;

  btcBnbPair(overrides?: CallOverrides): Promise<string>;

  busd(overrides?: CallOverrides): Promise<string>;

  getPair(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    bnb(overrides?: CallOverrides): Promise<string>;

    bnbBusdPair(overrides?: CallOverrides): Promise<string>;

    btc(overrides?: CallOverrides): Promise<string>;

    btcBnbPair(overrides?: CallOverrides): Promise<string>;

    busd(overrides?: CallOverrides): Promise<string>;

    getPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bnb(overrides?: CallOverrides): Promise<BigNumber>;

    bnbBusdPair(overrides?: CallOverrides): Promise<BigNumber>;

    btc(overrides?: CallOverrides): Promise<BigNumber>;

    btcBnbPair(overrides?: CallOverrides): Promise<BigNumber>;

    busd(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bnbBusdPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btcBnbPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    busd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
