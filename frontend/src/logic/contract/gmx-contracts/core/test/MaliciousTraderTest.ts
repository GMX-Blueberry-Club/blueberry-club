/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MaliciousTraderTestInterface extends utils.Interface {
  functions: {
    "createIncreasePositionETH(address[],address,uint256,uint256,bool,uint256,uint256,bytes32,address)": FunctionFragment;
    "positionRouter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createIncreasePositionETH" | "positionRouter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createIncreasePositionETH",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "positionRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createIncreasePositionETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionRouter",
    data: BytesLike
  ): Result;

  events: {
    "Received()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
}

export interface ReceivedEventObject {}
export type ReceivedEvent = TypedEvent<[], ReceivedEventObject>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface MaliciousTraderTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MaliciousTraderTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createIncreasePositionETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BytesLike>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    positionRouter(overrides?: CallOverrides): Promise<[string]>;
  };

  createIncreasePositionETH(
    _path: PromiseOrValue<string>[],
    _indexToken: PromiseOrValue<string>,
    _minOut: PromiseOrValue<BigNumberish>,
    _sizeDelta: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _acceptablePrice: PromiseOrValue<BigNumberish>,
    _executionFee: PromiseOrValue<BigNumberish>,
    _referralCode: PromiseOrValue<BytesLike>,
    _callbackTarget: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  positionRouter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createIncreasePositionETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BytesLike>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    positionRouter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Received()"(): ReceivedEventFilter;
    Received(): ReceivedEventFilter;
  };

  estimateGas: {
    createIncreasePositionETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BytesLike>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    positionRouter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createIncreasePositionETH(
      _path: PromiseOrValue<string>[],
      _indexToken: PromiseOrValue<string>,
      _minOut: PromiseOrValue<BigNumberish>,
      _sizeDelta: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _acceptablePrice: PromiseOrValue<BigNumberish>,
      _executionFee: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BytesLike>,
      _callbackTarget: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    positionRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
