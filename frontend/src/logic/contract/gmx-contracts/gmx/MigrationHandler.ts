/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MigrationHandlerInterface extends utils.Interface {
  functions: {
    "USDG_PRECISION()": FunctionFragment;
    "admin()": FunctionFragment;
    "ammRouterV1()": FunctionFragment;
    "ammRouterV2()": FunctionFragment;
    "bnb()": FunctionFragment;
    "busd()": FunctionFragment;
    "gmt()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "redeemUsdg(address,address,uint256)": FunctionFragment;
    "refund(address,address,address,uint256)": FunctionFragment;
    "refundedAmounts(address,address)": FunctionFragment;
    "swap(address,uint256,uint256,uint256)": FunctionFragment;
    "usdg()": FunctionFragment;
    "vault()": FunctionFragment;
    "xgmt()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "USDG_PRECISION"
      | "admin"
      | "ammRouterV1"
      | "ammRouterV2"
      | "bnb"
      | "busd"
      | "gmt"
      | "initialize"
      | "isInitialized"
      | "redeemUsdg"
      | "refund"
      | "refundedAmounts"
      | "swap"
      | "usdg"
      | "vault"
      | "xgmt"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "USDG_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ammRouterV1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ammRouterV2",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bnb", values?: undefined): string;
  encodeFunctionData(functionFragment: "busd", values?: undefined): string;
  encodeFunctionData(functionFragment: "gmt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUsdg",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refundedAmounts",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "usdg", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "xgmt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "USDG_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ammRouterV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ammRouterV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bnb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "busd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gmt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemUsdg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdg", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xgmt", data: BytesLike): Result;

  events: {};
}

export interface MigrationHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MigrationHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    USDG_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    ammRouterV1(overrides?: CallOverrides): Promise<[string]>;

    ammRouterV2(overrides?: CallOverrides): Promise<[string]>;

    bnb(overrides?: CallOverrides): Promise<[string]>;

    busd(overrides?: CallOverrides): Promise<[string]>;

    gmt(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _ammRouterV1: PromiseOrValue<string>,
      _ammRouterV2: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _gmt: PromiseOrValue<string>,
      _xgmt: PromiseOrValue<string>,
      _usdg: PromiseOrValue<string>,
      _bnb: PromiseOrValue<string>,
      _busd: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    redeemUsdg(
      _migrator: PromiseOrValue<string>,
      _redemptionToken: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refund(
      _migrator: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refundedAmounts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swap(
      _migrator: PromiseOrValue<string>,
      _gmtAmountForUsdg: PromiseOrValue<BigNumberish>,
      _xgmtAmountForUsdg: PromiseOrValue<BigNumberish>,
      _gmtAmountForBusd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdg(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    xgmt(overrides?: CallOverrides): Promise<[string]>;
  };

  USDG_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  ammRouterV1(overrides?: CallOverrides): Promise<string>;

  ammRouterV2(overrides?: CallOverrides): Promise<string>;

  bnb(overrides?: CallOverrides): Promise<string>;

  busd(overrides?: CallOverrides): Promise<string>;

  gmt(overrides?: CallOverrides): Promise<string>;

  initialize(
    _ammRouterV1: PromiseOrValue<string>,
    _ammRouterV2: PromiseOrValue<string>,
    _vault: PromiseOrValue<string>,
    _gmt: PromiseOrValue<string>,
    _xgmt: PromiseOrValue<string>,
    _usdg: PromiseOrValue<string>,
    _bnb: PromiseOrValue<string>,
    _busd: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  redeemUsdg(
    _migrator: PromiseOrValue<string>,
    _redemptionToken: PromiseOrValue<string>,
    _usdgAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refund(
    _migrator: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _usdgAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refundedAmounts(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swap(
    _migrator: PromiseOrValue<string>,
    _gmtAmountForUsdg: PromiseOrValue<BigNumberish>,
    _xgmtAmountForUsdg: PromiseOrValue<BigNumberish>,
    _gmtAmountForBusd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdg(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  xgmt(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    USDG_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    ammRouterV1(overrides?: CallOverrides): Promise<string>;

    ammRouterV2(overrides?: CallOverrides): Promise<string>;

    bnb(overrides?: CallOverrides): Promise<string>;

    busd(overrides?: CallOverrides): Promise<string>;

    gmt(overrides?: CallOverrides): Promise<string>;

    initialize(
      _ammRouterV1: PromiseOrValue<string>,
      _ammRouterV2: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _gmt: PromiseOrValue<string>,
      _xgmt: PromiseOrValue<string>,
      _usdg: PromiseOrValue<string>,
      _bnb: PromiseOrValue<string>,
      _busd: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    redeemUsdg(
      _migrator: PromiseOrValue<string>,
      _redemptionToken: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(
      _migrator: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    refundedAmounts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      _migrator: PromiseOrValue<string>,
      _gmtAmountForUsdg: PromiseOrValue<BigNumberish>,
      _xgmtAmountForUsdg: PromiseOrValue<BigNumberish>,
      _gmtAmountForBusd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdg(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    xgmt(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    USDG_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    ammRouterV1(overrides?: CallOverrides): Promise<BigNumber>;

    ammRouterV2(overrides?: CallOverrides): Promise<BigNumber>;

    bnb(overrides?: CallOverrides): Promise<BigNumber>;

    busd(overrides?: CallOverrides): Promise<BigNumber>;

    gmt(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _ammRouterV1: PromiseOrValue<string>,
      _ammRouterV2: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _gmt: PromiseOrValue<string>,
      _xgmt: PromiseOrValue<string>,
      _usdg: PromiseOrValue<string>,
      _bnb: PromiseOrValue<string>,
      _busd: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    redeemUsdg(
      _migrator: PromiseOrValue<string>,
      _redemptionToken: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refund(
      _migrator: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refundedAmounts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      _migrator: PromiseOrValue<string>,
      _gmtAmountForUsdg: PromiseOrValue<BigNumberish>,
      _xgmtAmountForUsdg: PromiseOrValue<BigNumberish>,
      _gmtAmountForBusd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdg(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    xgmt(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    USDG_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ammRouterV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ammRouterV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    busd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _ammRouterV1: PromiseOrValue<string>,
      _ammRouterV2: PromiseOrValue<string>,
      _vault: PromiseOrValue<string>,
      _gmt: PromiseOrValue<string>,
      _xgmt: PromiseOrValue<string>,
      _usdg: PromiseOrValue<string>,
      _bnb: PromiseOrValue<string>,
      _busd: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemUsdg(
      _migrator: PromiseOrValue<string>,
      _redemptionToken: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      _migrator: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refundedAmounts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      _migrator: PromiseOrValue<string>,
      _gmtAmountForUsdg: PromiseOrValue<BigNumberish>,
      _xgmtAmountForUsdg: PromiseOrValue<BigNumberish>,
      _gmtAmountForBusd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdg(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xgmt(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
