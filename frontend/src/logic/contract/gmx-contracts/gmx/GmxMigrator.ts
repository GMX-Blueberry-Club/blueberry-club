/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface GmxMigratorInterface extends utils.Interface {
  functions: {
    "actionsNonce()": FunctionFragment;
    "admin()": FunctionFragment;
    "ammRouter()": FunctionFragment;
    "approve(address,address,uint256,uint256)": FunctionFragment;
    "caps(address)": FunctionFragment;
    "endMigration()": FunctionFragment;
    "getIouToken(address)": FunctionFragment;
    "getTokenAmounts(address[])": FunctionFragment;
    "getTokenPrice(address)": FunctionFragment;
    "gmxPrice()": FunctionFragment;
    "hasMaxMigrationLimit()": FunctionFragment;
    "initialize(address,uint256,address[],address[],address[],uint256[],uint256[],address[],address[],address[])": FunctionFragment;
    "iouTokens(address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "isMigrationActive()": FunctionFragment;
    "isSigner(address)": FunctionFragment;
    "lpTokenAs(address)": FunctionFragment;
    "lpTokenBs(address)": FunctionFragment;
    "lpTokens(address)": FunctionFragment;
    "maxMigrationAmounts(address,address)": FunctionFragment;
    "migrate(address,uint256)": FunctionFragment;
    "migratedAmounts(address,address)": FunctionFragment;
    "minAuthorizations()": FunctionFragment;
    "pendingActions(bytes32)": FunctionFragment;
    "prices(address)": FunctionFragment;
    "setHasMaxMigrationLimit(bool)": FunctionFragment;
    "setMaxMigrationAmount(address,address,uint256)": FunctionFragment;
    "signApprove(address,address,uint256,uint256)": FunctionFragment;
    "signalApprove(address,address,uint256)": FunctionFragment;
    "signedActions(address,bytes32)": FunctionFragment;
    "signers(uint256)": FunctionFragment;
    "tokenAmounts(address)": FunctionFragment;
    "whitelistedTokens(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "actionsNonce"
      | "admin"
      | "ammRouter"
      | "approve"
      | "caps"
      | "endMigration"
      | "getIouToken"
      | "getTokenAmounts"
      | "getTokenPrice"
      | "gmxPrice"
      | "hasMaxMigrationLimit"
      | "initialize"
      | "iouTokens"
      | "isInitialized"
      | "isMigrationActive"
      | "isSigner"
      | "lpTokenAs"
      | "lpTokenBs"
      | "lpTokens"
      | "maxMigrationAmounts"
      | "migrate"
      | "migratedAmounts"
      | "minAuthorizations"
      | "pendingActions"
      | "prices"
      | "setHasMaxMigrationLimit"
      | "setMaxMigrationAmount"
      | "signApprove"
      | "signalApprove"
      | "signedActions"
      | "signers"
      | "tokenAmounts"
      | "whitelistedTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "actionsNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "ammRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "caps",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "endMigration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIouToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmounts",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gmxPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasMaxMigrationLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "iouTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMigrationActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lpTokenAs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lpTokenBs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lpTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMigrationAmounts",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "migratedAmounts",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minAuthorizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingActions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "prices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHasMaxMigrationLimit",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMigrationAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signedActions",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "signers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAmounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokens",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "actionsNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ammRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "caps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIouToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gmxPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasMaxMigrationLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iouTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMigrationActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpTokenAs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpTokenBs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxMigrationAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migratedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuthorizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHasMaxMigrationLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMigrationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signedActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokens",
    data: BytesLike
  ): Result;

  events: {
    "ClearAction(bytes32,uint256)": EventFragment;
    "SignAction(bytes32,uint256)": EventFragment;
    "SignalApprove(address,address,uint256,bytes32,uint256)": EventFragment;
    "SignalPendingAction(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalApprove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalPendingAction"): EventFragment;
}

export interface ClearActionEventObject {
  action: string;
  nonce: BigNumber;
}
export type ClearActionEvent = TypedEvent<
  [string, BigNumber],
  ClearActionEventObject
>;

export type ClearActionEventFilter = TypedEventFilter<ClearActionEvent>;

export interface SignActionEventObject {
  action: string;
  nonce: BigNumber;
}
export type SignActionEvent = TypedEvent<
  [string, BigNumber],
  SignActionEventObject
>;

export type SignActionEventFilter = TypedEventFilter<SignActionEvent>;

export interface SignalApproveEventObject {
  token: string;
  spender: string;
  amount: BigNumber;
  action: string;
  nonce: BigNumber;
}
export type SignalApproveEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  SignalApproveEventObject
>;

export type SignalApproveEventFilter = TypedEventFilter<SignalApproveEvent>;

export interface SignalPendingActionEventObject {
  action: string;
  nonce: BigNumber;
}
export type SignalPendingActionEvent = TypedEvent<
  [string, BigNumber],
  SignalPendingActionEventObject
>;

export type SignalPendingActionEventFilter =
  TypedEventFilter<SignalPendingActionEvent>;

export interface GmxMigrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GmxMigratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    actionsNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    ammRouter(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    caps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    endMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getIouToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenAmounts(
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTokenPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gmxPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasMaxMigrationLimit(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _ammRouter: PromiseOrValue<string>,
      _gmxPrice: PromiseOrValue<BigNumberish>,
      _signers: PromiseOrValue<string>[],
      _whitelistedTokens: PromiseOrValue<string>[],
      _iouTokens: PromiseOrValue<string>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _caps: PromiseOrValue<BigNumberish>[],
      _lpTokens: PromiseOrValue<string>[],
      _lpTokenAs: PromiseOrValue<string>[],
      _lpTokenBs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    iouTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    isMigrationActive(overrides?: CallOverrides): Promise<[boolean]>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lpTokenAs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lpTokenBs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lpTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxMigrationAmounts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    migrate(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migratedAmounts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minAuthorizations(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    prices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setHasMaxMigrationLimit(
      _hasMaxMigrationLimit: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxMigrationAmount(
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _maxMigrationAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signedActions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    signers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  actionsNonce(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  ammRouter(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  caps(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  endMigration(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getIouToken(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenAmounts(
    _tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTokenPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gmxPrice(overrides?: CallOverrides): Promise<BigNumber>;

  hasMaxMigrationLimit(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _ammRouter: PromiseOrValue<string>,
    _gmxPrice: PromiseOrValue<BigNumberish>,
    _signers: PromiseOrValue<string>[],
    _whitelistedTokens: PromiseOrValue<string>[],
    _iouTokens: PromiseOrValue<string>[],
    _prices: PromiseOrValue<BigNumberish>[],
    _caps: PromiseOrValue<BigNumberish>[],
    _lpTokens: PromiseOrValue<string>[],
    _lpTokenAs: PromiseOrValue<string>[],
    _lpTokenBs: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  iouTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  isMigrationActive(overrides?: CallOverrides): Promise<boolean>;

  isSigner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lpTokenAs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  lpTokenBs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  lpTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxMigrationAmounts(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  migrate(
    _token: PromiseOrValue<string>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migratedAmounts(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

  pendingActions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  prices(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setHasMaxMigrationLimit(
    _hasMaxMigrationLimit: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxMigrationAmount(
    _account: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _maxMigrationAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signApprove(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalApprove(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signedActions(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  signers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenAmounts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistedTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    actionsNonce(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    ammRouter(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    caps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endMigration(overrides?: CallOverrides): Promise<void>;

    getIouToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenAmounts(
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTokenPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gmxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    hasMaxMigrationLimit(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _ammRouter: PromiseOrValue<string>,
      _gmxPrice: PromiseOrValue<BigNumberish>,
      _signers: PromiseOrValue<string>[],
      _whitelistedTokens: PromiseOrValue<string>[],
      _iouTokens: PromiseOrValue<string>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _caps: PromiseOrValue<BigNumberish>[],
      _lpTokens: PromiseOrValue<string>[],
      _lpTokenAs: PromiseOrValue<string>[],
      _lpTokenBs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    iouTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    isMigrationActive(overrides?: CallOverrides): Promise<boolean>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lpTokenAs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    lpTokenBs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    lpTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxMigrationAmounts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    migratedAmounts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    prices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setHasMaxMigrationLimit(
      _hasMaxMigrationLimit: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMigrationAmount(
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _maxMigrationAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signedActions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    signers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ClearAction(bytes32,uint256)"(
      action?: null,
      nonce?: null
    ): ClearActionEventFilter;
    ClearAction(action?: null, nonce?: null): ClearActionEventFilter;

    "SignAction(bytes32,uint256)"(
      action?: null,
      nonce?: null
    ): SignActionEventFilter;
    SignAction(action?: null, nonce?: null): SignActionEventFilter;

    "SignalApprove(address,address,uint256,bytes32,uint256)"(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null,
      nonce?: null
    ): SignalApproveEventFilter;
    SignalApprove(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null,
      nonce?: null
    ): SignalApproveEventFilter;

    "SignalPendingAction(bytes32,uint256)"(
      action?: null,
      nonce?: null
    ): SignalPendingActionEventFilter;
    SignalPendingAction(
      action?: null,
      nonce?: null
    ): SignalPendingActionEventFilter;
  };

  estimateGas: {
    actionsNonce(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    ammRouter(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    caps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getIouToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAmounts(
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gmxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    hasMaxMigrationLimit(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _ammRouter: PromiseOrValue<string>,
      _gmxPrice: PromiseOrValue<BigNumberish>,
      _signers: PromiseOrValue<string>[],
      _whitelistedTokens: PromiseOrValue<string>[],
      _iouTokens: PromiseOrValue<string>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _caps: PromiseOrValue<BigNumberish>[],
      _lpTokens: PromiseOrValue<string>[],
      _lpTokenAs: PromiseOrValue<string>[],
      _lpTokenBs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    iouTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    isMigrationActive(overrides?: CallOverrides): Promise<BigNumber>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpTokenAs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpTokenBs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMigrationAmounts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migratedAmounts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minAuthorizations(overrides?: CallOverrides): Promise<BigNumber>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setHasMaxMigrationLimit(
      _hasMaxMigrationLimit: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxMigrationAmount(
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _maxMigrationAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signedActions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    actionsNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ammRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    caps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endMigration(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getIouToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAmounts(
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gmxPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasMaxMigrationLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _ammRouter: PromiseOrValue<string>,
      _gmxPrice: PromiseOrValue<BigNumberish>,
      _signers: PromiseOrValue<string>[],
      _whitelistedTokens: PromiseOrValue<string>[],
      _iouTokens: PromiseOrValue<string>[],
      _prices: PromiseOrValue<BigNumberish>[],
      _caps: PromiseOrValue<BigNumberish>[],
      _lpTokens: PromiseOrValue<string>[],
      _lpTokenAs: PromiseOrValue<string>[],
      _lpTokenBs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    iouTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMigrationActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSigner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpTokenAs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpTokenBs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMigrationAmounts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migratedAmounts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAuthorizations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setHasMaxMigrationLimit(
      _hasMaxMigrationLimit: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxMigrationAmount(
      _account: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _maxMigrationAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signedActions(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
