/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface PriceFeedTimelockInterface extends utils.Interface {
  functions: {
    "MAX_BUFFER()": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,address,uint256)": FunctionFragment;
    "buffer()": FunctionFragment;
    "cancelAction(bytes32)": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "isKeeper(address)": FunctionFragment;
    "pendingActions(bytes32)": FunctionFragment;
    "priceFeedSetTokenConfig(address,address,address,uint256,bool)": FunctionFragment;
    "setAdjustment(address,address,bool,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBuffer(uint256)": FunctionFragment;
    "setContractHandler(address,bool)": FunctionFragment;
    "setExternalAdmin(address,address)": FunctionFragment;
    "setGov(address,address)": FunctionFragment;
    "setIsAmmEnabled(address,bool)": FunctionFragment;
    "setIsSecondaryPriceEnabled(address,bool)": FunctionFragment;
    "setIsSpreadEnabled(address,bool)": FunctionFragment;
    "setKeeper(address,bool)": FunctionFragment;
    "setMaxPriceUpdateDelay(address,uint256)": FunctionFragment;
    "setMaxStrictPriceDeviation(address,uint256)": FunctionFragment;
    "setMinBlockInterval(address,uint256)": FunctionFragment;
    "setPriceDuration(address,uint256)": FunctionFragment;
    "setPriceFeedUpdater(address,address,bool)": FunctionFragment;
    "setPriceFeedWatcher(address,address,bool)": FunctionFragment;
    "setPriceSampleSpace(address,uint256)": FunctionFragment;
    "setSpreadBasisPoints(address,address,uint256)": FunctionFragment;
    "setSpreadBasisPointsIfChainError(address,uint256)": FunctionFragment;
    "setSpreadBasisPointsIfInactive(address,uint256)": FunctionFragment;
    "setUseV2Pricing(address,bool)": FunctionFragment;
    "setVaultPriceFeed(address,address)": FunctionFragment;
    "signalApprove(address,address,uint256)": FunctionFragment;
    "signalPriceFeedSetTokenConfig(address,address,address,uint256,bool)": FunctionFragment;
    "signalSetGov(address,address)": FunctionFragment;
    "signalSetPriceFeedUpdater(address,address,bool)": FunctionFragment;
    "signalSetPriceFeedWatcher(address,address,bool)": FunctionFragment;
    "signalWithdrawToken(address,address,address,uint256)": FunctionFragment;
    "tokenManager()": FunctionFragment;
    "transferIn(address,address,uint256)": FunctionFragment;
    "withdrawToken(address,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_BUFFER"
      | "admin"
      | "approve"
      | "buffer"
      | "cancelAction"
      | "isHandler"
      | "isKeeper"
      | "pendingActions"
      | "priceFeedSetTokenConfig"
      | "setAdjustment"
      | "setAdmin"
      | "setBuffer"
      | "setContractHandler"
      | "setExternalAdmin"
      | "setGov"
      | "setIsAmmEnabled"
      | "setIsSecondaryPriceEnabled"
      | "setIsSpreadEnabled"
      | "setKeeper"
      | "setMaxPriceUpdateDelay"
      | "setMaxStrictPriceDeviation"
      | "setMinBlockInterval"
      | "setPriceDuration"
      | "setPriceFeedUpdater"
      | "setPriceFeedWatcher"
      | "setPriceSampleSpace"
      | "setSpreadBasisPoints"
      | "setSpreadBasisPointsIfChainError"
      | "setSpreadBasisPointsIfInactive"
      | "setUseV2Pricing"
      | "setVaultPriceFeed"
      | "signalApprove"
      | "signalPriceFeedSetTokenConfig"
      | "signalSetGov"
      | "signalSetPriceFeedUpdater"
      | "signalSetPriceFeedWatcher"
      | "signalWithdrawToken"
      | "tokenManager"
      | "transferIn"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_BUFFER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "buffer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelAction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isHandler",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isKeeper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingActions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedSetTokenConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdjustment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractHandler",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsAmmEnabled",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSecondaryPriceEnabled",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSpreadEnabled",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPriceUpdateDelay",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStrictPriceDeviation",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBlockInterval",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceDuration",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeedUpdater",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeedWatcher",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceSampleSpace",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPoints",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPointsIfChainError",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPointsIfInactive",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseV2Pricing",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultPriceFeed",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalPriceFeedSetTokenConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetGov",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetPriceFeedUpdater",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetPriceFeedWatcher",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalWithdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferIn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_BUFFER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedSetTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExternalAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsAmmEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSecondaryPriceEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSpreadEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPriceUpdateDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStrictPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBlockInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeedUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeedWatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceSampleSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPointsIfChainError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPointsIfInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseV2Pricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalPriceFeedSetTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetPriceFeedUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetPriceFeedWatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "ClearAction(bytes32)": EventFragment;
    "SignalApprove(address,address,uint256,bytes32)": EventFragment;
    "SignalPendingAction(bytes32)": EventFragment;
    "SignalPriceFeedSetTokenConfig(address,address,address,uint256,bool)": EventFragment;
    "SignalSetGov(address,address,bytes32)": EventFragment;
    "SignalSetPriceFeedWatcher(address,address,bool)": EventFragment;
    "SignalWithdrawToken(address,address,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalApprove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalPendingAction"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SignalPriceFeedSetTokenConfig"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetPriceFeedWatcher"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalWithdrawToken"): EventFragment;
}

export interface ClearActionEventObject {
  action: string;
}
export type ClearActionEvent = TypedEvent<[string], ClearActionEventObject>;

export type ClearActionEventFilter = TypedEventFilter<ClearActionEvent>;

export interface SignalApproveEventObject {
  token: string;
  spender: string;
  amount: BigNumber;
  action: string;
}
export type SignalApproveEvent = TypedEvent<
  [string, string, BigNumber, string],
  SignalApproveEventObject
>;

export type SignalApproveEventFilter = TypedEventFilter<SignalApproveEvent>;

export interface SignalPendingActionEventObject {
  action: string;
}
export type SignalPendingActionEvent = TypedEvent<
  [string],
  SignalPendingActionEventObject
>;

export type SignalPendingActionEventFilter =
  TypedEventFilter<SignalPendingActionEvent>;

export interface SignalPriceFeedSetTokenConfigEventObject {
  vaultPriceFeed: string;
  token: string;
  priceFeed: string;
  priceDecimals: BigNumber;
  isStrictStable: boolean;
}
export type SignalPriceFeedSetTokenConfigEvent = TypedEvent<
  [string, string, string, BigNumber, boolean],
  SignalPriceFeedSetTokenConfigEventObject
>;

export type SignalPriceFeedSetTokenConfigEventFilter =
  TypedEventFilter<SignalPriceFeedSetTokenConfigEvent>;

export interface SignalSetGovEventObject {
  target: string;
  gov: string;
  action: string;
}
export type SignalSetGovEvent = TypedEvent<
  [string, string, string],
  SignalSetGovEventObject
>;

export type SignalSetGovEventFilter = TypedEventFilter<SignalSetGovEvent>;

export interface SignalSetPriceFeedWatcherEventObject {
  fastPriceFeed: string;
  account: string;
  isActive: boolean;
}
export type SignalSetPriceFeedWatcherEvent = TypedEvent<
  [string, string, boolean],
  SignalSetPriceFeedWatcherEventObject
>;

export type SignalSetPriceFeedWatcherEventFilter =
  TypedEventFilter<SignalSetPriceFeedWatcherEvent>;

export interface SignalWithdrawTokenEventObject {
  target: string;
  token: string;
  receiver: string;
  amount: BigNumber;
  action: string;
}
export type SignalWithdrawTokenEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  SignalWithdrawTokenEventObject
>;

export type SignalWithdrawTokenEventFilter =
  TypedEventFilter<SignalWithdrawTokenEvent>;

export interface PriceFeedTimelock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceFeedTimelockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelAction(
      _action: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isHandler(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdjustment(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBuffer(
      _buffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExternalAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsAmmEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsSecondaryPriceEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsSpreadEnabled(
      _fastPriceFeed: PromiseOrValue<string>,
      _isSpreadEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxPriceUpdateDelay(
      _fastPriceFeed: PromiseOrValue<string>,
      _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxStrictPriceDeviation(
      _priceFeed: PromiseOrValue<string>,
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinBlockInterval(
      _fastPriceFeed: PromiseOrValue<string>,
      _minBlockInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceDuration(
      _fastPriceFeed: PromiseOrValue<string>,
      _priceDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeedUpdater(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeedWatcher(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceSampleSpace(
      _priceFeed: PromiseOrValue<string>,
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPoints(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPointsIfChainError(
      _fastPriceFeed: PromiseOrValue<string>,
      _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPointsIfInactive(
      _fastPriceFeed: PromiseOrValue<string>,
      _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUseV2Pricing(
      _priceFeed: PromiseOrValue<string>,
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVaultPriceFeed(
      _fastPriceFeed: PromiseOrValue<string>,
      _vaultPriceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalPriceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalSetGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalSetPriceFeedUpdater(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalSetPriceFeedWatcher(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalWithdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<[string]>;

    transferIn(
      _sender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buffer(overrides?: CallOverrides): Promise<BigNumber>;

  cancelAction(
    _action: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isHandler(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKeeper(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pendingActions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceFeedSetTokenConfig(
    _vaultPriceFeed: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    _priceDecimals: PromiseOrValue<BigNumberish>,
    _isStrictStable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdjustment(
    _priceFeed: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _isAdditive: PromiseOrValue<boolean>,
    _adjustmentBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBuffer(
    _buffer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractHandler(
    _handler: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExternalAdmin(
    _target: PromiseOrValue<string>,
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _target: PromiseOrValue<string>,
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsAmmEnabled(
    _priceFeed: PromiseOrValue<string>,
    _isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsSecondaryPriceEnabled(
    _priceFeed: PromiseOrValue<string>,
    _isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsSpreadEnabled(
    _fastPriceFeed: PromiseOrValue<string>,
    _isSpreadEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxPriceUpdateDelay(
    _fastPriceFeed: PromiseOrValue<string>,
    _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxStrictPriceDeviation(
    _priceFeed: PromiseOrValue<string>,
    _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinBlockInterval(
    _fastPriceFeed: PromiseOrValue<string>,
    _minBlockInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceDuration(
    _fastPriceFeed: PromiseOrValue<string>,
    _priceDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeedUpdater(
    _fastPriceFeed: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeedWatcher(
    _fastPriceFeed: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceSampleSpace(
    _priceFeed: PromiseOrValue<string>,
    _priceSampleSpace: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPoints(
    _priceFeed: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _spreadBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPointsIfChainError(
    _fastPriceFeed: PromiseOrValue<string>,
    _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPointsIfInactive(
    _fastPriceFeed: PromiseOrValue<string>,
    _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUseV2Pricing(
    _priceFeed: PromiseOrValue<string>,
    _useV2Pricing: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVaultPriceFeed(
    _fastPriceFeed: PromiseOrValue<string>,
    _vaultPriceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalApprove(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalPriceFeedSetTokenConfig(
    _vaultPriceFeed: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    _priceDecimals: PromiseOrValue<BigNumberish>,
    _isStrictStable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalSetGov(
    _target: PromiseOrValue<string>,
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalSetPriceFeedUpdater(
    _fastPriceFeed: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalSetPriceFeedWatcher(
    _fastPriceFeed: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalWithdrawToken(
    _target: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenManager(overrides?: CallOverrides): Promise<string>;

  transferIn(
    _sender: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _target: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buffer(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAction(
      _action: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isHandler(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdjustment(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuffer(
      _buffer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExternalAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsAmmEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSecondaryPriceEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSpreadEnabled(
      _fastPriceFeed: PromiseOrValue<string>,
      _isSpreadEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPriceUpdateDelay(
      _fastPriceFeed: PromiseOrValue<string>,
      _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStrictPriceDeviation(
      _priceFeed: PromiseOrValue<string>,
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBlockInterval(
      _fastPriceFeed: PromiseOrValue<string>,
      _minBlockInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceDuration(
      _fastPriceFeed: PromiseOrValue<string>,
      _priceDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeedUpdater(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeedWatcher(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceSampleSpace(
      _priceFeed: PromiseOrValue<string>,
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPoints(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPointsIfChainError(
      _fastPriceFeed: PromiseOrValue<string>,
      _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPointsIfInactive(
      _fastPriceFeed: PromiseOrValue<string>,
      _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUseV2Pricing(
      _priceFeed: PromiseOrValue<string>,
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultPriceFeed(
      _fastPriceFeed: PromiseOrValue<string>,
      _vaultPriceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalPriceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetPriceFeedUpdater(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetPriceFeedWatcher(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalWithdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenManager(overrides?: CallOverrides): Promise<string>;

    transferIn(
      _sender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClearAction(bytes32)"(action?: null): ClearActionEventFilter;
    ClearAction(action?: null): ClearActionEventFilter;

    "SignalApprove(address,address,uint256,bytes32)"(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null
    ): SignalApproveEventFilter;
    SignalApprove(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null
    ): SignalApproveEventFilter;

    "SignalPendingAction(bytes32)"(
      action?: null
    ): SignalPendingActionEventFilter;
    SignalPendingAction(action?: null): SignalPendingActionEventFilter;

    "SignalPriceFeedSetTokenConfig(address,address,address,uint256,bool)"(
      vaultPriceFeed?: null,
      token?: null,
      priceFeed?: null,
      priceDecimals?: null,
      isStrictStable?: null
    ): SignalPriceFeedSetTokenConfigEventFilter;
    SignalPriceFeedSetTokenConfig(
      vaultPriceFeed?: null,
      token?: null,
      priceFeed?: null,
      priceDecimals?: null,
      isStrictStable?: null
    ): SignalPriceFeedSetTokenConfigEventFilter;

    "SignalSetGov(address,address,bytes32)"(
      target?: null,
      gov?: null,
      action?: null
    ): SignalSetGovEventFilter;
    SignalSetGov(
      target?: null,
      gov?: null,
      action?: null
    ): SignalSetGovEventFilter;

    "SignalSetPriceFeedWatcher(address,address,bool)"(
      fastPriceFeed?: null,
      account?: null,
      isActive?: null
    ): SignalSetPriceFeedWatcherEventFilter;
    SignalSetPriceFeedWatcher(
      fastPriceFeed?: null,
      account?: null,
      isActive?: null
    ): SignalSetPriceFeedWatcherEventFilter;

    "SignalWithdrawToken(address,address,address,uint256,bytes32)"(
      target?: null,
      token?: null,
      receiver?: null,
      amount?: null,
      action?: null
    ): SignalWithdrawTokenEventFilter;
    SignalWithdrawToken(
      target?: null,
      token?: null,
      receiver?: null,
      amount?: null,
      action?: null
    ): SignalWithdrawTokenEventFilter;
  };

  estimateGas: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buffer(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAction(
      _action: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isHandler(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdjustment(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBuffer(
      _buffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExternalAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsAmmEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsSecondaryPriceEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsSpreadEnabled(
      _fastPriceFeed: PromiseOrValue<string>,
      _isSpreadEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxPriceUpdateDelay(
      _fastPriceFeed: PromiseOrValue<string>,
      _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxStrictPriceDeviation(
      _priceFeed: PromiseOrValue<string>,
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinBlockInterval(
      _fastPriceFeed: PromiseOrValue<string>,
      _minBlockInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceDuration(
      _fastPriceFeed: PromiseOrValue<string>,
      _priceDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeedUpdater(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeedWatcher(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceSampleSpace(
      _priceFeed: PromiseOrValue<string>,
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPoints(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPointsIfChainError(
      _fastPriceFeed: PromiseOrValue<string>,
      _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPointsIfInactive(
      _fastPriceFeed: PromiseOrValue<string>,
      _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUseV2Pricing(
      _priceFeed: PromiseOrValue<string>,
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVaultPriceFeed(
      _fastPriceFeed: PromiseOrValue<string>,
      _vaultPriceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalPriceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalSetGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalSetPriceFeedUpdater(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalSetPriceFeedWatcher(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalWithdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenManager(overrides?: CallOverrides): Promise<BigNumber>;

    transferIn(
      _sender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelAction(
      _action: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isHandler(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKeeper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdjustment(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBuffer(
      _buffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExternalAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsAmmEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsSecondaryPriceEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsSpreadEnabled(
      _fastPriceFeed: PromiseOrValue<string>,
      _isSpreadEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPriceUpdateDelay(
      _fastPriceFeed: PromiseOrValue<string>,
      _maxPriceUpdateDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxStrictPriceDeviation(
      _priceFeed: PromiseOrValue<string>,
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinBlockInterval(
      _fastPriceFeed: PromiseOrValue<string>,
      _minBlockInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceDuration(
      _fastPriceFeed: PromiseOrValue<string>,
      _priceDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeedUpdater(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeedWatcher(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceSampleSpace(
      _priceFeed: PromiseOrValue<string>,
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPoints(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPointsIfChainError(
      _fastPriceFeed: PromiseOrValue<string>,
      _spreadBasisPointsIfChainError: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPointsIfInactive(
      _fastPriceFeed: PromiseOrValue<string>,
      _spreadBasisPointsIfInactive: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUseV2Pricing(
      _priceFeed: PromiseOrValue<string>,
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVaultPriceFeed(
      _fastPriceFeed: PromiseOrValue<string>,
      _vaultPriceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalPriceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalSetGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalSetPriceFeedUpdater(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalSetPriceFeedWatcher(
      _fastPriceFeed: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalWithdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferIn(
      _sender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
