/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface GmxTimelockInterface extends utils.Interface {
  functions: {
    "MAX_BUFFER()": FunctionFragment;
    "MAX_FEE_BASIS_POINTS()": FunctionFragment;
    "MAX_FUNDING_RATE_FACTOR()": FunctionFragment;
    "MAX_LEVERAGE_VALIDATION()": FunctionFragment;
    "PRICE_PRECISION()": FunctionFragment;
    "addExcludedToken(address)": FunctionFragment;
    "addPlugin(address,address)": FunctionFragment;
    "admin()": FunctionFragment;
    "approve(address,address,uint256)": FunctionFragment;
    "buffer()": FunctionFragment;
    "cancelAction(bytes32)": FunctionFragment;
    "excludedTokens(address)": FunctionFragment;
    "isHandler(address)": FunctionFragment;
    "longBuffer()": FunctionFragment;
    "maxTokenSupply()": FunctionFragment;
    "mintReceiver()": FunctionFragment;
    "pendingActions(bytes32)": FunctionFragment;
    "priceFeedSetTokenConfig(address,address,address,uint256,bool)": FunctionFragment;
    "processMint(address,address,uint256)": FunctionFragment;
    "redeemUsdg(address,address,uint256)": FunctionFragment;
    "removeAdmin(address,address)": FunctionFragment;
    "rewardManager()": FunctionFragment;
    "setAdjustment(address,address,bool,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBuffer(uint256)": FunctionFragment;
    "setContractHandler(address,bool)": FunctionFragment;
    "setExternalAdmin(address,address)": FunctionFragment;
    "setFavorPrimaryPrice(address,bool)": FunctionFragment;
    "setFees(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "setFundingRate(address,uint256,uint256,uint256)": FunctionFragment;
    "setGov(address,address)": FunctionFragment;
    "setInPrivateLiquidationMode(address,bool)": FunctionFragment;
    "setInPrivateTransferMode(address,bool)": FunctionFragment;
    "setIsAmmEnabled(address,bool)": FunctionFragment;
    "setIsLeverageEnabled(address,bool)": FunctionFragment;
    "setIsSecondaryPriceEnabled(address,bool)": FunctionFragment;
    "setIsSwapEnabled(address,bool)": FunctionFragment;
    "setLiquidator(address,address,bool)": FunctionFragment;
    "setMaxGasPrice(address,uint256)": FunctionFragment;
    "setMaxGlobalShortSize(address,address,uint256)": FunctionFragment;
    "setMaxLeverage(address,uint256)": FunctionFragment;
    "setMaxStrictPriceDeviation(address,uint256)": FunctionFragment;
    "setPriceFeed(address,address)": FunctionFragment;
    "setPriceSampleSpace(address,uint256)": FunctionFragment;
    "setSpreadBasisPoints(address,address,uint256)": FunctionFragment;
    "setSpreadThresholdBasisPoints(address,uint256)": FunctionFragment;
    "setTokenConfig(address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setUseV2Pricing(address,bool)": FunctionFragment;
    "setVaultUtils(address,address)": FunctionFragment;
    "signalAddPlugin(address,address)": FunctionFragment;
    "signalApprove(address,address,uint256)": FunctionFragment;
    "signalMint(address,address,uint256)": FunctionFragment;
    "signalPriceFeedSetTokenConfig(address,address,address,uint256,bool)": FunctionFragment;
    "signalRedeemUsdg(address,address,uint256)": FunctionFragment;
    "signalSetGov(address,address)": FunctionFragment;
    "signalSetPriceFeed(address,address)": FunctionFragment;
    "signalVaultSetTokenConfig(address,address,uint256,uint256,uint256,uint256,bool,bool)": FunctionFragment;
    "signalWithdrawToken(address,address,address,uint256)": FunctionFragment;
    "tokenManager()": FunctionFragment;
    "transferIn(address,address,uint256)": FunctionFragment;
    "vaultSetTokenConfig(address,address,uint256,uint256,uint256,uint256,bool,bool)": FunctionFragment;
    "withdrawFees(address,address,address)": FunctionFragment;
    "withdrawToken(address,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_BUFFER"
      | "MAX_FEE_BASIS_POINTS"
      | "MAX_FUNDING_RATE_FACTOR"
      | "MAX_LEVERAGE_VALIDATION"
      | "PRICE_PRECISION"
      | "addExcludedToken"
      | "addPlugin"
      | "admin"
      | "approve"
      | "buffer"
      | "cancelAction"
      | "excludedTokens"
      | "isHandler"
      | "longBuffer"
      | "maxTokenSupply"
      | "mintReceiver"
      | "pendingActions"
      | "priceFeedSetTokenConfig"
      | "processMint"
      | "redeemUsdg"
      | "removeAdmin"
      | "rewardManager"
      | "setAdjustment"
      | "setAdmin"
      | "setBuffer"
      | "setContractHandler"
      | "setExternalAdmin"
      | "setFavorPrimaryPrice"
      | "setFees"
      | "setFundingRate"
      | "setGov"
      | "setInPrivateLiquidationMode"
      | "setInPrivateTransferMode"
      | "setIsAmmEnabled"
      | "setIsLeverageEnabled"
      | "setIsSecondaryPriceEnabled"
      | "setIsSwapEnabled"
      | "setLiquidator"
      | "setMaxGasPrice"
      | "setMaxGlobalShortSize"
      | "setMaxLeverage"
      | "setMaxStrictPriceDeviation"
      | "setPriceFeed"
      | "setPriceSampleSpace"
      | "setSpreadBasisPoints"
      | "setSpreadThresholdBasisPoints"
      | "setTokenConfig"
      | "setUseV2Pricing"
      | "setVaultUtils"
      | "signalAddPlugin"
      | "signalApprove"
      | "signalMint"
      | "signalPriceFeedSetTokenConfig"
      | "signalRedeemUsdg"
      | "signalSetGov"
      | "signalSetPriceFeed"
      | "signalVaultSetTokenConfig"
      | "signalWithdrawToken"
      | "tokenManager"
      | "transferIn"
      | "vaultSetTokenConfig"
      | "withdrawFees"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_BUFFER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEE_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FUNDING_RATE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LEVERAGE_VALIDATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addExcludedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addPlugin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "buffer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelAction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "excludedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isHandler",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "longBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingActions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedSetTokenConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processMint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUsdg",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdjustment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractHandler",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFavorPrimaryPrice",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingRate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGov",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInPrivateLiquidationMode",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInPrivateTransferMode",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsAmmEnabled",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLeverageEnabled",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSecondaryPriceEnabled",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSwapEnabled",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGasPrice",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGlobalShortSize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLeverage",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxStrictPriceDeviation",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceSampleSpace",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadBasisPoints",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadThresholdBasisPoints",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseV2Pricing",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultUtils",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalAddPlugin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalMint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalPriceFeedSetTokenConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalRedeemUsdg",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetGov",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSetPriceFeed",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalVaultSetTokenConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signalWithdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferIn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultSetTokenConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_BUFFER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEE_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FUNDING_RATE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LEVERAGE_VALIDATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addExcludedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPlugin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHandler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "longBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedSetTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemUsdg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExternalAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFavorPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInPrivateLiquidationMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInPrivateTransferMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsAmmEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLeverageEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSecondaryPriceEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSwapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGlobalShortSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStrictPriceDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceSampleSpace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadThresholdBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseV2Pricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultUtils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalAddPlugin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signalMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signalPriceFeedSetTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalRedeemUsdg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetGov",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSetPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalVaultSetTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalWithdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultSetTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "ClearAction(bytes32)": EventFragment;
    "SignalAddPlugin(address,address,bytes32)": EventFragment;
    "SignalApprove(address,address,uint256,bytes32)": EventFragment;
    "SignalMint(address,address,uint256,bytes32)": EventFragment;
    "SignalPendingAction(bytes32)": EventFragment;
    "SignalPriceFeedSetTokenConfig(address,address,address,uint256,bool)": EventFragment;
    "SignalRedeemUsdg(address,address,uint256)": EventFragment;
    "SignalSetGov(address,address,bytes32)": EventFragment;
    "SignalSetPriceFeed(address,address,bytes32)": EventFragment;
    "SignalVaultSetTokenConfig(address,address,uint256,uint256,uint256,uint256,bool,bool)": EventFragment;
    "SignalWithdrawToken(address,address,address,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalAddPlugin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalApprove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalPendingAction"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SignalPriceFeedSetTokenConfig"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalRedeemUsdg"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSetPriceFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalVaultSetTokenConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalWithdrawToken"): EventFragment;
}

export interface ClearActionEventObject {
  action: string;
}
export type ClearActionEvent = TypedEvent<[string], ClearActionEventObject>;

export type ClearActionEventFilter = TypedEventFilter<ClearActionEvent>;

export interface SignalAddPluginEventObject {
  router: string;
  plugin: string;
  action: string;
}
export type SignalAddPluginEvent = TypedEvent<
  [string, string, string],
  SignalAddPluginEventObject
>;

export type SignalAddPluginEventFilter = TypedEventFilter<SignalAddPluginEvent>;

export interface SignalApproveEventObject {
  token: string;
  spender: string;
  amount: BigNumber;
  action: string;
}
export type SignalApproveEvent = TypedEvent<
  [string, string, BigNumber, string],
  SignalApproveEventObject
>;

export type SignalApproveEventFilter = TypedEventFilter<SignalApproveEvent>;

export interface SignalMintEventObject {
  token: string;
  receiver: string;
  amount: BigNumber;
  action: string;
}
export type SignalMintEvent = TypedEvent<
  [string, string, BigNumber, string],
  SignalMintEventObject
>;

export type SignalMintEventFilter = TypedEventFilter<SignalMintEvent>;

export interface SignalPendingActionEventObject {
  action: string;
}
export type SignalPendingActionEvent = TypedEvent<
  [string],
  SignalPendingActionEventObject
>;

export type SignalPendingActionEventFilter =
  TypedEventFilter<SignalPendingActionEvent>;

export interface SignalPriceFeedSetTokenConfigEventObject {
  vaultPriceFeed: string;
  token: string;
  priceFeed: string;
  priceDecimals: BigNumber;
  isStrictStable: boolean;
}
export type SignalPriceFeedSetTokenConfigEvent = TypedEvent<
  [string, string, string, BigNumber, boolean],
  SignalPriceFeedSetTokenConfigEventObject
>;

export type SignalPriceFeedSetTokenConfigEventFilter =
  TypedEventFilter<SignalPriceFeedSetTokenConfigEvent>;

export interface SignalRedeemUsdgEventObject {
  vault: string;
  token: string;
  amount: BigNumber;
}
export type SignalRedeemUsdgEvent = TypedEvent<
  [string, string, BigNumber],
  SignalRedeemUsdgEventObject
>;

export type SignalRedeemUsdgEventFilter =
  TypedEventFilter<SignalRedeemUsdgEvent>;

export interface SignalSetGovEventObject {
  target: string;
  gov: string;
  action: string;
}
export type SignalSetGovEvent = TypedEvent<
  [string, string, string],
  SignalSetGovEventObject
>;

export type SignalSetGovEventFilter = TypedEventFilter<SignalSetGovEvent>;

export interface SignalSetPriceFeedEventObject {
  vault: string;
  priceFeed: string;
  action: string;
}
export type SignalSetPriceFeedEvent = TypedEvent<
  [string, string, string],
  SignalSetPriceFeedEventObject
>;

export type SignalSetPriceFeedEventFilter =
  TypedEventFilter<SignalSetPriceFeedEvent>;

export interface SignalVaultSetTokenConfigEventObject {
  vault: string;
  token: string;
  tokenDecimals: BigNumber;
  tokenWeight: BigNumber;
  minProfitBps: BigNumber;
  maxUsdgAmount: BigNumber;
  isStable: boolean;
  isShortable: boolean;
}
export type SignalVaultSetTokenConfigEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ],
  SignalVaultSetTokenConfigEventObject
>;

export type SignalVaultSetTokenConfigEventFilter =
  TypedEventFilter<SignalVaultSetTokenConfigEvent>;

export interface SignalWithdrawTokenEventObject {
  target: string;
  token: string;
  receiver: string;
  amount: BigNumber;
  action: string;
}
export type SignalWithdrawTokenEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  SignalWithdrawTokenEventObject
>;

export type SignalWithdrawTokenEventFilter =
  TypedEventFilter<SignalWithdrawTokenEvent>;

export interface GmxTimelock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GmxTimelockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LEVERAGE_VALIDATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    addExcludedToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPlugin(
      _router: PromiseOrValue<string>,
      _plugin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelAction(
      _action: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excludedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isHandler(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    longBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintReceiver(overrides?: CallOverrides): Promise<[string]>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processMint(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemUsdg(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<[string]>;

    setAdjustment(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBuffer(
      _buffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContractHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExternalAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFavorPrimaryPrice(
      _priceFeed: PromiseOrValue<string>,
      _favorPrimaryPrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _vault: PromiseOrValue<string>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
      _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _hasDynamicFees: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFundingRate(
      _vault: PromiseOrValue<string>,
      _fundingInterval: PromiseOrValue<BigNumberish>,
      _fundingRateFactor: PromiseOrValue<BigNumberish>,
      _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInPrivateLiquidationMode(
      _vault: PromiseOrValue<string>,
      _inPrivateLiquidationMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInPrivateTransferMode(
      _token: PromiseOrValue<string>,
      _inPrivateTransferMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsAmmEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsLeverageEnabled(
      _vault: PromiseOrValue<string>,
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsSecondaryPriceEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsSwapEnabled(
      _vault: PromiseOrValue<string>,
      _isSwapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidator(
      _vault: PromiseOrValue<string>,
      _liquidator: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxGasPrice(
      _vault: PromiseOrValue<string>,
      _maxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxGlobalShortSize(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxLeverage(
      _vault: PromiseOrValue<string>,
      _maxLeverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxStrictPriceDeviation(
      _priceFeed: PromiseOrValue<string>,
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _vault: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceSampleSpace(
      _priceFeed: PromiseOrValue<string>,
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadBasisPoints(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpreadThresholdBasisPoints(
      _priceFeed: PromiseOrValue<string>,
      _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenConfig(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _bufferAmount: PromiseOrValue<BigNumberish>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUseV2Pricing(
      _priceFeed: PromiseOrValue<string>,
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVaultUtils(
      _vault: PromiseOrValue<string>,
      _vaultUtils: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalAddPlugin(
      _router: PromiseOrValue<string>,
      _plugin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalMint(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalPriceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalRedeemUsdg(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalSetGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalSetPriceFeed(
      _vault: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalVaultSetTokenConfig(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalWithdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<[string]>;

    transferIn(
      _sender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultSetTokenConfig(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LEVERAGE_VALIDATION(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  addExcludedToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPlugin(
    _router: PromiseOrValue<string>,
    _plugin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  approve(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buffer(overrides?: CallOverrides): Promise<BigNumber>;

  cancelAction(
    _action: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excludedTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isHandler(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  longBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  maxTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  mintReceiver(overrides?: CallOverrides): Promise<string>;

  pendingActions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceFeedSetTokenConfig(
    _vaultPriceFeed: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    _priceDecimals: PromiseOrValue<BigNumberish>,
    _isStrictStable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processMint(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemUsdg(
    _vault: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    _token: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardManager(overrides?: CallOverrides): Promise<string>;

  setAdjustment(
    _priceFeed: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _isAdditive: PromiseOrValue<boolean>,
    _adjustmentBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBuffer(
    _buffer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContractHandler(
    _handler: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExternalAdmin(
    _target: PromiseOrValue<string>,
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFavorPrimaryPrice(
    _priceFeed: PromiseOrValue<string>,
    _favorPrimaryPrice: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _vault: PromiseOrValue<string>,
    _taxBasisPoints: PromiseOrValue<BigNumberish>,
    _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
    _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
    _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
    _minProfitTime: PromiseOrValue<BigNumberish>,
    _hasDynamicFees: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFundingRate(
    _vault: PromiseOrValue<string>,
    _fundingInterval: PromiseOrValue<BigNumberish>,
    _fundingRateFactor: PromiseOrValue<BigNumberish>,
    _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGov(
    _target: PromiseOrValue<string>,
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInPrivateLiquidationMode(
    _vault: PromiseOrValue<string>,
    _inPrivateLiquidationMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInPrivateTransferMode(
    _token: PromiseOrValue<string>,
    _inPrivateTransferMode: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsAmmEnabled(
    _priceFeed: PromiseOrValue<string>,
    _isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsLeverageEnabled(
    _vault: PromiseOrValue<string>,
    _isLeverageEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsSecondaryPriceEnabled(
    _priceFeed: PromiseOrValue<string>,
    _isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsSwapEnabled(
    _vault: PromiseOrValue<string>,
    _isSwapEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidator(
    _vault: PromiseOrValue<string>,
    _liquidator: PromiseOrValue<string>,
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxGasPrice(
    _vault: PromiseOrValue<string>,
    _maxGasPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxGlobalShortSize(
    _vault: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxLeverage(
    _vault: PromiseOrValue<string>,
    _maxLeverage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxStrictPriceDeviation(
    _priceFeed: PromiseOrValue<string>,
    _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _vault: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceSampleSpace(
    _priceFeed: PromiseOrValue<string>,
    _priceSampleSpace: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadBasisPoints(
    _priceFeed: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _spreadBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpreadThresholdBasisPoints(
    _priceFeed: PromiseOrValue<string>,
    _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenConfig(
    _vault: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _tokenWeight: PromiseOrValue<BigNumberish>,
    _minProfitBps: PromiseOrValue<BigNumberish>,
    _maxUsdgAmount: PromiseOrValue<BigNumberish>,
    _bufferAmount: PromiseOrValue<BigNumberish>,
    _usdgAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUseV2Pricing(
    _priceFeed: PromiseOrValue<string>,
    _useV2Pricing: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVaultUtils(
    _vault: PromiseOrValue<string>,
    _vaultUtils: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalAddPlugin(
    _router: PromiseOrValue<string>,
    _plugin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalApprove(
    _token: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalMint(
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalPriceFeedSetTokenConfig(
    _vaultPriceFeed: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    _priceDecimals: PromiseOrValue<BigNumberish>,
    _isStrictStable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalRedeemUsdg(
    _vault: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalSetGov(
    _target: PromiseOrValue<string>,
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalSetPriceFeed(
    _vault: PromiseOrValue<string>,
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalVaultSetTokenConfig(
    _vault: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _tokenDecimals: PromiseOrValue<BigNumberish>,
    _tokenWeight: PromiseOrValue<BigNumberish>,
    _minProfitBps: PromiseOrValue<BigNumberish>,
    _maxUsdgAmount: PromiseOrValue<BigNumberish>,
    _isStable: PromiseOrValue<boolean>,
    _isShortable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalWithdrawToken(
    _target: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenManager(overrides?: CallOverrides): Promise<string>;

  transferIn(
    _sender: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultSetTokenConfig(
    _vault: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _tokenDecimals: PromiseOrValue<BigNumberish>,
    _tokenWeight: PromiseOrValue<BigNumberish>,
    _minProfitBps: PromiseOrValue<BigNumberish>,
    _maxUsdgAmount: PromiseOrValue<BigNumberish>,
    _isStable: PromiseOrValue<boolean>,
    _isShortable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    _vault: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _target: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LEVERAGE_VALIDATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addExcludedToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPlugin(
      _router: PromiseOrValue<string>,
      _plugin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buffer(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAction(
      _action: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    excludedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isHandler(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    longBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mintReceiver(overrides?: CallOverrides): Promise<string>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    processMint(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemUsdg(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdmin(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    setAdjustment(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuffer(
      _buffer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExternalAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFavorPrimaryPrice(
      _priceFeed: PromiseOrValue<string>,
      _favorPrimaryPrice: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _vault: PromiseOrValue<string>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
      _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _hasDynamicFees: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingRate(
      _vault: PromiseOrValue<string>,
      _fundingInterval: PromiseOrValue<BigNumberish>,
      _fundingRateFactor: PromiseOrValue<BigNumberish>,
      _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInPrivateLiquidationMode(
      _vault: PromiseOrValue<string>,
      _inPrivateLiquidationMode: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInPrivateTransferMode(
      _token: PromiseOrValue<string>,
      _inPrivateTransferMode: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsAmmEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsLeverageEnabled(
      _vault: PromiseOrValue<string>,
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSecondaryPriceEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsSwapEnabled(
      _vault: PromiseOrValue<string>,
      _isSwapEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidator(
      _vault: PromiseOrValue<string>,
      _liquidator: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGasPrice(
      _vault: PromiseOrValue<string>,
      _maxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxGlobalShortSize(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLeverage(
      _vault: PromiseOrValue<string>,
      _maxLeverage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxStrictPriceDeviation(
      _priceFeed: PromiseOrValue<string>,
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(
      _vault: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceSampleSpace(
      _priceFeed: PromiseOrValue<string>,
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadBasisPoints(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadThresholdBasisPoints(
      _priceFeed: PromiseOrValue<string>,
      _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenConfig(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _bufferAmount: PromiseOrValue<BigNumberish>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUseV2Pricing(
      _priceFeed: PromiseOrValue<string>,
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultUtils(
      _vault: PromiseOrValue<string>,
      _vaultUtils: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalAddPlugin(
      _router: PromiseOrValue<string>,
      _plugin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalMint(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalPriceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalRedeemUsdg(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSetPriceFeed(
      _vault: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalVaultSetTokenConfig(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalWithdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenManager(overrides?: CallOverrides): Promise<string>;

    transferIn(
      _sender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultSetTokenConfig(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClearAction(bytes32)"(action?: null): ClearActionEventFilter;
    ClearAction(action?: null): ClearActionEventFilter;

    "SignalAddPlugin(address,address,bytes32)"(
      router?: null,
      plugin?: null,
      action?: null
    ): SignalAddPluginEventFilter;
    SignalAddPlugin(
      router?: null,
      plugin?: null,
      action?: null
    ): SignalAddPluginEventFilter;

    "SignalApprove(address,address,uint256,bytes32)"(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null
    ): SignalApproveEventFilter;
    SignalApprove(
      token?: null,
      spender?: null,
      amount?: null,
      action?: null
    ): SignalApproveEventFilter;

    "SignalMint(address,address,uint256,bytes32)"(
      token?: null,
      receiver?: null,
      amount?: null,
      action?: null
    ): SignalMintEventFilter;
    SignalMint(
      token?: null,
      receiver?: null,
      amount?: null,
      action?: null
    ): SignalMintEventFilter;

    "SignalPendingAction(bytes32)"(
      action?: null
    ): SignalPendingActionEventFilter;
    SignalPendingAction(action?: null): SignalPendingActionEventFilter;

    "SignalPriceFeedSetTokenConfig(address,address,address,uint256,bool)"(
      vaultPriceFeed?: null,
      token?: null,
      priceFeed?: null,
      priceDecimals?: null,
      isStrictStable?: null
    ): SignalPriceFeedSetTokenConfigEventFilter;
    SignalPriceFeedSetTokenConfig(
      vaultPriceFeed?: null,
      token?: null,
      priceFeed?: null,
      priceDecimals?: null,
      isStrictStable?: null
    ): SignalPriceFeedSetTokenConfigEventFilter;

    "SignalRedeemUsdg(address,address,uint256)"(
      vault?: null,
      token?: null,
      amount?: null
    ): SignalRedeemUsdgEventFilter;
    SignalRedeemUsdg(
      vault?: null,
      token?: null,
      amount?: null
    ): SignalRedeemUsdgEventFilter;

    "SignalSetGov(address,address,bytes32)"(
      target?: null,
      gov?: null,
      action?: null
    ): SignalSetGovEventFilter;
    SignalSetGov(
      target?: null,
      gov?: null,
      action?: null
    ): SignalSetGovEventFilter;

    "SignalSetPriceFeed(address,address,bytes32)"(
      vault?: null,
      priceFeed?: null,
      action?: null
    ): SignalSetPriceFeedEventFilter;
    SignalSetPriceFeed(
      vault?: null,
      priceFeed?: null,
      action?: null
    ): SignalSetPriceFeedEventFilter;

    "SignalVaultSetTokenConfig(address,address,uint256,uint256,uint256,uint256,bool,bool)"(
      vault?: null,
      token?: null,
      tokenDecimals?: null,
      tokenWeight?: null,
      minProfitBps?: null,
      maxUsdgAmount?: null,
      isStable?: null,
      isShortable?: null
    ): SignalVaultSetTokenConfigEventFilter;
    SignalVaultSetTokenConfig(
      vault?: null,
      token?: null,
      tokenDecimals?: null,
      tokenWeight?: null,
      minProfitBps?: null,
      maxUsdgAmount?: null,
      isStable?: null,
      isShortable?: null
    ): SignalVaultSetTokenConfigEventFilter;

    "SignalWithdrawToken(address,address,address,uint256,bytes32)"(
      target?: null,
      token?: null,
      receiver?: null,
      amount?: null,
      action?: null
    ): SignalWithdrawTokenEventFilter;
    SignalWithdrawToken(
      target?: null,
      token?: null,
      receiver?: null,
      amount?: null,
      action?: null
    ): SignalWithdrawTokenEventFilter;
  };

  estimateGas: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FUNDING_RATE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LEVERAGE_VALIDATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addExcludedToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPlugin(
      _router: PromiseOrValue<string>,
      _plugin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buffer(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAction(
      _action: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excludedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isHandler(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    longBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mintReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processMint(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemUsdg(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardManager(overrides?: CallOverrides): Promise<BigNumber>;

    setAdjustment(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBuffer(
      _buffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContractHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExternalAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFavorPrimaryPrice(
      _priceFeed: PromiseOrValue<string>,
      _favorPrimaryPrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFees(
      _vault: PromiseOrValue<string>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
      _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _hasDynamicFees: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFundingRate(
      _vault: PromiseOrValue<string>,
      _fundingInterval: PromiseOrValue<BigNumberish>,
      _fundingRateFactor: PromiseOrValue<BigNumberish>,
      _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInPrivateLiquidationMode(
      _vault: PromiseOrValue<string>,
      _inPrivateLiquidationMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInPrivateTransferMode(
      _token: PromiseOrValue<string>,
      _inPrivateTransferMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsAmmEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsLeverageEnabled(
      _vault: PromiseOrValue<string>,
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsSecondaryPriceEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsSwapEnabled(
      _vault: PromiseOrValue<string>,
      _isSwapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidator(
      _vault: PromiseOrValue<string>,
      _liquidator: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxGasPrice(
      _vault: PromiseOrValue<string>,
      _maxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxGlobalShortSize(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxLeverage(
      _vault: PromiseOrValue<string>,
      _maxLeverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxStrictPriceDeviation(
      _priceFeed: PromiseOrValue<string>,
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _vault: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceSampleSpace(
      _priceFeed: PromiseOrValue<string>,
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadBasisPoints(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpreadThresholdBasisPoints(
      _priceFeed: PromiseOrValue<string>,
      _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenConfig(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _bufferAmount: PromiseOrValue<BigNumberish>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUseV2Pricing(
      _priceFeed: PromiseOrValue<string>,
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVaultUtils(
      _vault: PromiseOrValue<string>,
      _vaultUtils: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalAddPlugin(
      _router: PromiseOrValue<string>,
      _plugin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalMint(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalPriceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalRedeemUsdg(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalSetGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalSetPriceFeed(
      _vault: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalVaultSetTokenConfig(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalWithdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenManager(overrides?: CallOverrides): Promise<BigNumber>;

    transferIn(
      _sender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultSetTokenConfig(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_BUFFER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE_BASIS_POINTS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_FUNDING_RATE_FACTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_LEVERAGE_VALIDATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addExcludedToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPlugin(
      _router: PromiseOrValue<string>,
      _plugin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelAction(
      _action: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excludedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHandler(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    longBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTokenSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingActions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processMint(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemUsdg(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdjustment(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _isAdditive: PromiseOrValue<boolean>,
      _adjustmentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBuffer(
      _buffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContractHandler(
      _handler: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExternalAdmin(
      _target: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFavorPrimaryPrice(
      _priceFeed: PromiseOrValue<string>,
      _favorPrimaryPrice: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _vault: PromiseOrValue<string>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _stableTaxBasisPoints: PromiseOrValue<BigNumberish>,
      _mintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _swapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _stableSwapFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _marginFeeBasisPoints: PromiseOrValue<BigNumberish>,
      _liquidationFeeUsd: PromiseOrValue<BigNumberish>,
      _minProfitTime: PromiseOrValue<BigNumberish>,
      _hasDynamicFees: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFundingRate(
      _vault: PromiseOrValue<string>,
      _fundingInterval: PromiseOrValue<BigNumberish>,
      _fundingRateFactor: PromiseOrValue<BigNumberish>,
      _stableFundingRateFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInPrivateLiquidationMode(
      _vault: PromiseOrValue<string>,
      _inPrivateLiquidationMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInPrivateTransferMode(
      _token: PromiseOrValue<string>,
      _inPrivateTransferMode: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsAmmEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsLeverageEnabled(
      _vault: PromiseOrValue<string>,
      _isLeverageEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsSecondaryPriceEnabled(
      _priceFeed: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsSwapEnabled(
      _vault: PromiseOrValue<string>,
      _isSwapEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidator(
      _vault: PromiseOrValue<string>,
      _liquidator: PromiseOrValue<string>,
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGasPrice(
      _vault: PromiseOrValue<string>,
      _maxGasPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxGlobalShortSize(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLeverage(
      _vault: PromiseOrValue<string>,
      _maxLeverage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxStrictPriceDeviation(
      _priceFeed: PromiseOrValue<string>,
      _maxStrictPriceDeviation: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _vault: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceSampleSpace(
      _priceFeed: PromiseOrValue<string>,
      _priceSampleSpace: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadBasisPoints(
      _priceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _spreadBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpreadThresholdBasisPoints(
      _priceFeed: PromiseOrValue<string>,
      _spreadThresholdBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenConfig(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _bufferAmount: PromiseOrValue<BigNumberish>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUseV2Pricing(
      _priceFeed: PromiseOrValue<string>,
      _useV2Pricing: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVaultUtils(
      _vault: PromiseOrValue<string>,
      _vaultUtils: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalAddPlugin(
      _router: PromiseOrValue<string>,
      _plugin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalApprove(
      _token: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalMint(
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalPriceFeedSetTokenConfig(
      _vaultPriceFeed: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      _priceDecimals: PromiseOrValue<BigNumberish>,
      _isStrictStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalRedeemUsdg(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalSetGov(
      _target: PromiseOrValue<string>,
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalSetPriceFeed(
      _vault: PromiseOrValue<string>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalVaultSetTokenConfig(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalWithdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferIn(
      _sender: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultSetTokenConfig(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _tokenDecimals: PromiseOrValue<BigNumberish>,
      _tokenWeight: PromiseOrValue<BigNumberish>,
      _minProfitBps: PromiseOrValue<BigNumberish>,
      _maxUsdgAmount: PromiseOrValue<BigNumberish>,
      _isStable: PromiseOrValue<boolean>,
      _isShortable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      _vault: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _target: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
